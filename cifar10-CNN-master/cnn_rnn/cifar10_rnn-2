{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:516: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:517: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:518: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:519: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:520: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:525: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n",
      "/usr/local/lib/python3.6/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:541: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "/usr/local/lib/python3.6/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:542: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "/usr/local/lib/python3.6/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:543: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "/usr/local/lib/python3.6/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:544: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "/usr/local/lib/python3.6/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:545: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "/usr/local/lib/python3.6/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:550: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10000, 32, 32)\n",
      "显示原图 1\n",
      "loading ./cifar10_data/cifar-10-batches-py/data_batch_1\n",
      "(10000, 32, 32)\n",
      "loading ./cifar10_data/cifar-10-batches-py/data_batch_2\n",
      "(10000, 32, 32)\n",
      "loading ./cifar10_data/cifar-10-batches-py/data_batch_3\n",
      "(10000, 32, 32)\n",
      "loading ./cifar10_data/cifar-10-batches-py/data_batch_4\n",
      "(10000, 32, 32)\n",
      "loading ./cifar10_data/cifar-10-batches-py/data_batch_5\n",
      "(10000, 32, 32)\n",
      "(10000, 32, 32)\n",
      "finished loadding CIFAR-10 data\n",
      "training data shape: (50000, 32, 32)\n",
      "training labels shape: (50000,)\n",
      "test data shape: (10000, 32, 32)\n",
      "test labels shape: (10000,)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#rnn网络数据预处理\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import pickle\n",
    "import random\n",
    "from time import time\n",
    "#消除警告的包\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# 设置随机种子\n",
    "random.seed(1)\n",
    "\n",
    "\n",
    "\n",
    "def load_gray_CIFAR_batch(filename):\n",
    "    with open(filename,'rb')as f:\n",
    "        data_dict = pickle.load(f,encoding='bytes')\n",
    "        images = data_dict[b'data']\n",
    "        labels = data_dict[b'labels']\n",
    "        \n",
    "        #把元数据结构调整为：BCWH\n",
    "        images = images.reshape(10000,3,32,32)\n",
    "        gray_img = images.mean(1)\n",
    "        print(gray_img.shape)\n",
    "        #tesorflow 处理图像数据的结构为：BWHC\n",
    "        #把通道数据c移动到最后一个维度\n",
    "#         images = gray_img.transpose(0,2,3,1)\n",
    "        labels = np.array(labels)\n",
    "        return gray_img,labels\n",
    "test_image,test_label = load_gray_CIFAR_batch('./cifar10_data/cifar-10-batches-py/test_batch')\n",
    "print('显示原图',test_label[6])\n",
    "plt.imshow(test_image[6])\n",
    "\n",
    "import os\n",
    "def load_CIFAR_data(data_dir):\n",
    "    images_train = []\n",
    "    labels_train = []\n",
    "\n",
    "\n",
    "    for i in range(5):\n",
    "        # 循环读取，每一个文件的数据和标签名\n",
    "        f = os.path.join(data_dir,'data_batch_%d'%(i+1))\n",
    "        print('loading',f)\n",
    "        image_batch,label_batch=load_gray_CIFAR_batch(f)\n",
    "        images_train.append(image_batch)\n",
    "        labels_train.append(label_batch)\n",
    "        Xtrain=np.concatenate(images_train)\n",
    "        Ytrain=np.concatenate(labels_train)\n",
    "        del image_batch,label_batch\n",
    "    Xtest,Ytest = load_gray_CIFAR_batch(os.path.join(data_dir,'test_batch'))\n",
    "    print(\"finished loadding CIFAR-10 data\")\n",
    "    return Xtrain,Ytrain,Xtest,Ytest\n",
    "data_dir = './cifar10_data/cifar-10-batches-py/'\n",
    "\n",
    "Xtrain,Ytrain,Xtest,Ytest = load_CIFAR_data(data_dir)\n",
    "print('training data shape:',Xtrain.shape)\n",
    "print('training labels shape:',Ytrain.shape)\n",
    "print('test data shape:',Xtest.shape)\n",
    "print('test labels shape:',Ytest.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "plt.imshow(Xtrain[6])\n",
    "print(Ytrain[6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAr8AAAFSCAYAAAD7K7cvAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAgAElEQVR4nOy9e7hdVX3v/f3lRsIthFu4JBgMgXCToIGioKKAUhWteKFq++JbT23PqVX71rf1nOf1PPacnlNaPW3P0WprlYKWolXsQRHloCAXQSAhCeQCSQi3cAkBAUFuYe/x/rHmXvmO715rzLX2Xmsn2ev7eZ48mWOPeRlzjN8Yc6w5vvP3i5QSjDHGGGOMGQSm7OgCGGOMMcYYM1F48muMMcYYYwYGT36NMcYYY8zA4MmvMcYYY4wZGDz5NcYYY4wxA4Mnv8YYY4wxZmDw5LdARJwdEXdHxMaI+HSHx3w2Ij7VJu+m3pbQ7AxExIUR8VhErO7imA9HxBfb5F0ZEfv0roSmn0TE/Ii4NiLWRsSaiPhEF8e+s9OxhY5Z0I2tmV2PiJgZEbdGxKrKpv6sxT6LI2JlRKyIiIU7opxm5yEipla2cEWLPNuK4MlvGyJiKoC/A/DrAI4B8IGIOGY850wpva4XZTM7HRcBOLtXJ0spvS2l9FSvzmf6zssA/jildAyAUwD8QadjRUrpeymlC/TvETGtx2U0uxYvAnhzSukEAEsAnB0Rp8g+vwHgOymlE1NK94z8MRr42T54fALAujZ5thVhIG+6Q04GsDGltCml9BKAbwJ4F+8QER+v3vbcERHfpKxjIuKnEbEpIj5O+z9b/X96RFwfET+o3iz//aAa4GQgpXQ9gF+0y4+I90XE6uotzvWUdUhE/CgiNkTEX9H+90XE/tUbvrsi4pKIWBcR34mI3ft5L6Z7UkqPpJRur7afQeMBdCjvExHnRMQt1ZuXH0fE3OrvzRWAiLioGgtuAfBX1SrSNyLi5spGflevXdnIDRFxe/XvddXfT6/GoO+QDUWV95qIuC4ilkfEVRFxcF8ryHRNavBslZxe/WtGpIqItwH4JIB/X606LKieJV8HsBrA/Ij4XDXu3BkR51XHTYmIL1U2cXW1yvTeCb4902MiYh6AtwP4aos820oL/HahPYcCeJDSmwH8muzzaQCHp5RejHyZejGANwHYC8DdEfHllNI2OfZkNN4o3w/gRwDOBfCdHpbf7Dz8ZwBvTSk9JHayBMCJaLzluTsivpBSelCOPQrAR1JKP4uICwH8BwCfn5BSm66JiAVotOktknUjgFNSSiki/h2APwHwxy1OMQ/A61JKQxHxWQCvQuNt8h4AVkTED2T/xwCclVJ6ISIWAbgUwNIq70QAxwJ4GMDPAJxaTay/AOBdKaWt1YPuvwH4nbHftekH1erjcgBHAPi7lFLTplJKV0bE3wN4NqX0+cruFgE4P6X084h4DxrjywkA9gdwW/XD+1QAC9B49hyIxg+1Cyfspky/+Fs0xpS9NMO20hq/bRwfdwC4JCJ+C42lzxF+kFJ6MaX0OBoPp7ktjr21eqs8hMYD67T+F9fsIH4G4KLqzd1U+vtPUkpPp5ReALAWwCtaHPtgSuln1fY/w3ay0xIRewK4DMAnU0q/lOx5AK6KiDsB/L9oTEpb8e1qTBjh8pTS89VYci0aP5qZ6QD+sTrvt9F4UI1wa0ppc0ppGMBKNB5kRwE4DsDVEbESwP9Xlc3sZKSUhlJKS9Bon5Mj4riaQ+5PKf282j4NwKXVObYAuA7ASdXfv51SGk4pPYqGTZldmIh4B4DHUkrLuzhs4G3Fk9/2PARgPqXnVX9j3o6GLvjVaPxaGnmT/iLtM4TWb9hTTdpMElJKv4/GJGM+gOURsV+VZTuZJETEdDQmvpeklL7bYpcvAPhiSul4AL8HYGabU/1K0nXt/0cAtqDx1mYpgBmU18q+AsCalNKS6t/xKaW3tCmL2Qmo9P/Xov67ArUdMxicCuCdEXEfGvLMN0fEP9ccM/C24slve24DsCgiDo+IGQB+E8D3IuIvIuLdlUZ3fkrpWgB/CmA2gD27OP/J1bmnADgPjWVRM0mIiI9FxMeq7YUppVtSSv8ZwFbkP6rqOCwiXlttfxC2k52OSkv7NQDrUkp/TX9v2gAa48PIj+fzuzj9u6Lx5f9+AE5HY1xiZgN4pHq7+9vIVxZacTeAA0ZsKiKmR0S7t9BmBxERB4xIpCJiFoCzANw18vzp4BQ3ADgvGh4ADgDwBgC3orEK9Z5KzzkXDZsyuzAppf+YUpqXUlqAxjzlmpTSb9lWynjy24aU0ssAPgbgKjS0Lv+aUloD4HgAj6LxkPnnarlxBYD/1eUX+rcB+GJ17nsB/FsPi28mkIi4FMDNAI6KiM0R8RE0dN9PVLt8rvqQYDWAmwCs6uL0d6PhPWAdgDkAvtzDopvecCoaE883R8Od0MrqIxO2gc8C+HZELAfweBfnvgONt34/B/BfU0oPS/6XAJwfEauq6xXf6FQf774XwF9Wx6wEYC80Ox8HA7g2Iu5A41lxdUrpCmx//tTxb2jYzioA1wD4k2rp+jI0vl9Zi4aM6nYAT/e++GYnwLZSIFLyKmo3RMRVKaW3jvMcpwP4VErpHb0pldnZiIavxXOrycZYz7EAwBUppTqtn9kJGa8NVB+8PZtS8geOBkDPnj97ppSerVYTbgVwajXZMZMI20oZe3vokvEakxkM/MPG2AZMr+nR8+eKSlIxA43VhEkxmTE5tpUyfvNrjDHGGGMGBmt+jTHGGGPMwDCuyW9EnF1FCtkYXcanN4OFbcV0gu3EdIptxXSC7cS0Ysyyhyr6zHo0XLBsRuOL1A+klNYWjkmSHtO1zY4npYSUUkcN2K2tTJ8+Pc2cOZOPb25Pm5bL1KdM2f777YUXXsjyhoaGsjTbep3dl/K5PMPDwx0fp3l6L1xe3bfT8tSh55k6dWrbPL43vQbXu+7bouyPp5QOqCvbWMaUmTNnpj333O5h8MUXt7u21bZ5+eXtcWj4voHRbVGiVE/9kpFp/ZdssBt6ZVdchrry8DVnzNjulvill17Ctm3b+jKmzJ49O82duz3WEJdx+vTp2b5sC2on27blgTrZphStW+4ze+yxR5bH5dFxTOuz1C5aHu4PWh4+T2lcAPJ2Up555pm25913332zPL43veZuu+2WpXk81LF806ZNfRtTdttttzRr1qxmmrf33nvvtmV89tlns7xS+2sb6v0xOjaVxhttN00zaiu8r7bFWMeb0nNCz1uqk5deyr8Z5vlBq+uMsGXLFjz99NMtO8x4Png7GcDGlNImAIiIbwJ4FxpuMdrCDcnbO0J73KtrjmcSXxqAxgOfazyTI4bPo8ZYQ1e2MnPmTLz61a9uprlTHnjggaP2HWH9+vVZ3i9/mQfZ4s6u5S9NlDSPHwTPP/982+P0WB3g9MHA5dWHbGlirINjqQ21DDxx1LLzvelgqA9D3lev8cILL9zftkA5XY8pe+65J97+9rc30/feey9fN9v3iSeeyI5j9ttvP3SK2sNzzz3X3Fa76qZPlx5UpR99PMHR8o3nR16pPHoc14GWR+2K7WPBggXN7dWrVxfLKnRlK3PnzsWXvvSlZpr72sEHHzxq3xHUTh59NP/e5xe/+EVzW+1e07vvvvv2wp+cB+r71a+2e6i76667sjy1KR6H9aH/+OO5Fz3uDzqmsE1pm+2zzz5Zev787a7J1S6uueaaLM0/Jj7wgQ9keTxG69i5cOHCLM118tRTuRfR973vfX0bU2bNmoXTTz+9mT7mmO1BE9/61vwbsqef3u7562c/+1mWp/fHP3j0B5f+gGDb2X///bM87mtqY3PmzMnSPFnXfXk81GMPP/zwLI/Hfy1raQKuP/L0BwLXg45xvO+DDz6Y5S1atChL63VG+IM/+IOWfwfGJ3s4FACXaHP1t4yI+GhELIuIZeO4ltm1qbUVthMdpM3A0PWYohNcMzB0NabwJMUMFF2PKV2+2DG7KH3/4C2l9JWU0tKU0tJ+X8vsurCd6K9iYxi2FV3+MmYEtpPZs2fv6OKYnRi2lZLEw0wexiN7eAh5mNZ52B6+sy0ljdREMx6tXAldiuqVtKFU3pK2pp0eZjzX6PI+urKV4eHhbGmH60+XIXmgUtvicwDlMpe0corqFEvn4WtqXmmJXKUq/DZcl690sObz6H1oHfC59I07l09lDyWJxDhsvOsxJaWU3QPfr7Y/p9XODznkkCzN96vtpP2Jl/m0vrlOWTsIjK7Dvfbaq22enpcn/WoPXJ5SOwG57dTp87gedPn/ySefbG7XtT+fp6RJrWFcY8rWrVub27pkyrIHvc8NGzZk6XbLrcDoumdpjS7xsgxDr6nn4aVstSmWYeh19Icit32dXpWP1dUWrksgl0zojw6WT6gtqh3zvej40wVdjylDQ0OZnIHlKjfccEO275YtW5rbWi9a3yzjUEme3h/34dJzjMsGjG7HkgRBy8fnUpvjfXWc0HbjZ5fmqWyRy6eSHb4XfR7qffKYUro+M543v7cBWBQRh0fEDDRiSn9vHOczkxfbiukE24npFNuK6QTbiWnJmN/8ppRejoiPAbgKwFQAF6aU1vSsZGbSYFsxnWA7MZ1iWzGdYDsx7RhXeOOU0pUAruzmmJJri4mm9DVzHaUl6tJ9lZb2dClMlx668Y4x1nsrSSTG03ZjsZVWlGQFusShy7acr8tFeixfp6Qr7UafXCo7UK5Tbk+VfhxwQO7xh5chtT1LH3OU3LaVPF5ovtZJNx8wjsVO+B7bbWu5dMl106ZNWZqXlrVf6lIzL8HpciZfR9tX65TtTPuvLn0yet6SSz+1QV5uLZ0HyCUKvISr+9a5xStdoxu6sRVdyuZ7YckGkLfnAw88kOXph3NsCyUPLbqvtj3bjfYfPQ/LY3QsULthO1avFjwWaH/Qe+Elc11y1mN5bNVxlm1cv+DXumW7YblEt4xlTGG7fPjhh5vbOk5wvaiHDG2bUh/WNuf+pf2Hx15tb31WcTvq9bXdWLah7cZ2pGOI2gN7g1AZjnrtKEnRSnLH0r6dylkd4c0YY4wxxgwMnvwaY4wxxpiBwZNfY4wxxhgzMIxL8zsWugkx2wsmQldcCmOoZSjpEDVqySOPPJKlWeujbkHUFVI/7nui2k7dV3Ed1blZYVQPxVql8bjc4zKoxqqkqaxzvcblLekFNTqUloG1c+p+Z6wRvdSedN+SjfebTtuSy6z3o23D53z961+f5am7npUrVza31Z1QOzdswGg3UFwm1VyqVo77hGrcShprvW/WM6vOT/WNrO3rJmxqKVT3REX23LZtWzaectQs1WmzTpH1nkBZU6k66JJWXPsltwu7WgNGazNZf6l9Tfdluyk9l9RmSrrjugh+3JfuueeeLI8jvHH0uVYcddRRzW3V0/aTiMietdwPdJwofUeisBa29GwC8r6m31ewVlvHBY3wxu2oZddvRfi8arscjbTu2xpG+7dqgLnv6X12GtlVz8vlKz0b/ObXGGOMMcYMDJ78GmOMMcaYgWHCZQ/t3GVN1PIXU7rmeGQD6k6Kz8VuaoB86VNf7esyGi9x1C09dLr03K8od+OlnZxBy8vLM3rPunTDy3W6rKfLUKUlqpLLOd2X27fk6kbPq8uQbDe6XK77cj3ofaptcnn1Xrg83ZxnImUPKaW2bra0Lfge1L703tnOdF+VI7EbngULFrQ9ry5Jq31yvdVFv9JjGW4brQNtGx5jdPzRMvBSbOn6pYhzCi9L9ltKxfXCffH+++/P9uUlXl02VTd3fE4dm0qu7PT5wlIHHnu0rEAueVP3YBopjMcK7bPcH3RM0X35XlQmojIIfk79/Oc/z/LYNur6INvmj3/8Y0wUEZHZLN97SSqgY6S2I99P3fyCr6/SBq4nXf4vjTHa93UcYxtYt25dlsdjXF34Z743rS/tP3wvJblWSSYEtJc6lMYUv/k1xhhjjDEDgye/xhhjjDFmYPDk1xhjjDHGDAyT3tVZ6folvavqY0outlQDo65q2P2RarLYPYpqp0phVOvCF49Vy7sj2qQV7exE76sUnrXkjqvkfkkp1XWddpjdEmnbq+aNbey+++7L8tg105IlS7K8O+64Y8zl47Tqx7h8WnbVZ7G2rE6H1ksiIrt2SYvK7a/1UtLMq1vBRx99NEvz/ZZc+2h7s7ZUy6A6T3URVAonzRpBtr9WcNtou+l9cpuXwoHXhVTm80zUeDNt2rSsvtnuFy9enO3Ldb/ffvtledp/eMzW9tTxvOSejvfVsL/a9qzz1fNo+TQsLMPPqYMOOijLu+mmm7I0u3yrcxP4xBNPtNwGyiG8H3vssSzNGll14dVPhoeHs2ctt9uhhx6a7cvu2jTMb4mSi04g7zNa31we7T861vK3IuouTt3Qsa62pDMu1YGeZ968eVmeasl57qRzLLZtrVtNsy3x9YtzvLY5xhhjjDHGTDI8+TXGGGOMMQODJ7/GGGOMMWZgmFDN75QpUzIdK2tZVBfGeSV92Xgo6T41VKHqbrgMqodkfSaQa8FK4UVVn6V+N+fPn9/cVj98qt/pNNxsN9rgidQDs4aH61fvhTVNqvdUDSNr00rtCeRaJG1fLoPWn56X21R1deoHkutXy8O6cdUSqtbwxBNPbG6rf0S1k5LNszZT60DrmvfVep9IOtX/qk5WNcyveMUrmttLly7N8latWpWlua1K/nhVf6s6Rm6ruvCnXH7VhLJOVf2Kq5bvkEMOaW6rPR5zzDFZmvvPhg0bsjzuEyUfnJqeiPDzQKM+uf65XTRcON+b+tF98skns3SpfUt+dfW8t99+e3NbNZQln+6HHXZYlqdtxnp11fEee+yxzW191uh9ljTmui/7AVab4rS2vYaSPuuss5rb2gc/85nPoF9s27YNW7ZsaaZf/epXN7e78Qev9851qN8JqYaV21yfuzwW1+mMS2GzdWzgMVDLvnz58ua2atJL30+U/MED+X3qeMh52l90POTr2M+vMcYYY4wxgie/xhhjjDFmYJhw2QMv37Irk1JIzLqlsdKr7bGGMFZ3Hlu3bs3SvMynLsl0qVlduDC81KzH6fJxN7KMTl26dePyayJhe+Dy61J26T51yaUUXlTTvCylS1SlZVtdSuKlYl2eZhkLkC+1L1q0KMtjaYPam0oSuEzc3wBgzZo1Wfr73/9+c1tdW/F963k0zWj5NIxmL9Gwtdw2pdC+umymdcj9X5cWVdbE/VbHMZYgaPvrvrx8qGXX/s5toyFE+T5VEqNu2/g8mzZtyvLUBnkpVJeo2cVSyTWTwtfvpwRiypQpWd/kMmn/5n6gEiPdl8ccDUdfcnm5YsWKLI+lNHoNHZNZovCGN7why9OlY24XbQduQ+0Pet+8JK7PM5VMsLRGQyGzzdeFoz/uuOOa2wsXLsREMWXKlOxZweVQt5Isayu5QwXy+1NZQcktnrZNyXWktjHbZMl9GYC24yiQj0cqc1GpDd+bll2lnZyvrtj4PtWdntY11x/Xc2lM8ZtfY4wxxhgzMHjya4wxxhhjBgZPfo0xxhhjzMAwoZrfoaGhTAPEeqmSOxylFAavV6juqhQWVrU0ql1iXYvqB1kHpu6W9L5UE1yCy6fnYa1PSSu8o5gxYwYWLFjQTLOOSd0JcTupTlt1VKz5U92aaoq4HlRHxdoobTPVwpZcQGl5Oa32xjam2kKFy8f12Oqab3zjG5vbd999d5bHGlXVMs+ePTtLs5ZY89avX18s73gYHh7O2o7vvRsNqdb3xo0bm9t33nlnlqfaNG5j1ZnzWKA2puMG91PVypXcO5bGPy1ryTWS6jN//vOfZ+mS+yWuP83TduD6Krlh7CXDw8OZFpFdvKn7v9WrVze3NTwvuwcDgKOOOqq5rWOK3vfmzZub23fddVeWx+1b0kgDuest1fiySyoAuPHGG5vbhx9+eJbHz5Nrrrkmy1NbYFvVcVV1nBzSVm2T01o/Om7wWDVRdgI0vg05+uijm2nWwqttc//S/l2aB2gba522u4ai441+G8DfMuh3DQqP8dr+fB3VKz/00ENZmt3EabvpvfDzW7854eecnkefu2P5XsBvfo0xxhhjzMDgya8xxhhjjBkYPPk1xhhjjDEDw4Rqfg844AB84AMfaJmn2hXWe6gmS3VNrKXpxiew6pFYt6b+MEt6Wy27Hlval7UrqmNR3THrZVTrpXop9bXKsJZTdZ7d6Ir7xZ577onXv/71zTS3k2p/+D5ZawaM1mfxeVRvqb4TeV9tl5LmV+udNZaqY1cfrHxvqqtiu1aNncI+KlW7ddttt2Vptin1K8164SOOOCLLU80a+5pV3dkVV1xRLO940O8IuB21LbgOS3o8INefqY675KuyFDJU9W6qM+ayq+2qfbIN6r1w+fQaOqaUxkvWPQO5feo1S99vaBnatUM//fy+/PLL2bjHvpr1uhxKVccJffa88pWvbG6r3259DrD+Vp9pXGeq/9TQvuwPXH0z33DDDVma71ntlu9TQ9bquMZ6Ub5nYLRWk/udPmO5r+hYruP3wQcf3Nwu+bbtB+3Gf/WpzT7Mtd3U7rlPl8Z+IL9f1Z1zH9YxW9uNy6D+1nVc4/rXMZyPLZUVyOduWnbWUgP5fEPPU/r+SMcYtrnS9xGM3/waY4wxxpiBoXbyGxEXRsRjEbGa/rZvRFwdERuq/+eUzmEGA9uK6QTbiekU24rpBNuJ6ZZOZA8XAfgigK/T3z4N4CcppQsi4tNV+k/rTjRlypTs9TS/stdX1bxEqFIBDgUJlF3DlFyIlELlaihSXb7h1+51S6glV0S85KZLy7zsA+ShUnXJQsvAdatLI+ya5P7778/yxil7uAg9sJVZs2ZlyyMllye8HKdhF/Ve2PbUZZq2EV+ztHxVkkQAuexAXc3o0hfbgi75lEINa/vyMqTasS7Ls03xMiiQh2BVF2m6VHzYYYc1t0tuCisuQo/GFA1vzDagtlKSR5Xcc2nfalWGEUohtXUs0nGCj9U8LQPbgNonX6cbl0raB/SaXCe6b8mlX8lNUQeuFS9CD2xleHg4u3cuv/ZLrU9G3QyyDOLss8/O8jTsK7sT0zpiO9FxS/swX1PlE+pui/v7Aw88kOXx2KT3rLKrE044obmtz6lrr702S5dsgdu+bhzjMnXg6uwi9GhMmT59ejbecTv+9Kc/zfZle1CZlbYF90V1i6fPkZKrTb6O9lGVDrBs5957783yNPw2y2LYFSCQyypL/QPInyn6jNNrsk2qLIzvrW5e0q5vl6i1qJTS9QB+IX9+F4CLq+2LAfxGR1czkxrbiukE24npFNuK6QTbiemWsWp+56aURhTQjwKY227HiPhoRCyLiGX6S8gMBB3ZCtuJvoE0A8GYxhR9Y2IGgq7HlLrAMGZSMqYxZaI/rjM7hnF/8JYa7+fbrl2llL6SUlqaUlqqXxCawaJkK2wn6rnCDBbdjCl10bDM5KbTMUWX2M1g0c2YUvKUZCYPY3V1tiUiDk4pPRIRBwN4rPYINLRLl156aTPNRlb6Za46ulJYRNXAqMatpA1hzVHJTRaQa3RUn6dvo1ivVAoLqg9ydVPFeka9T60j1tqwaxwgDzerZe9D6OiubSUiMo0rt5n+Kmct0H333ZflaX0edNBBzW3VIqm7HnbRwhomRV0hqR1zGVQrpfuWwk+WXOKpVo41garz0oF90aJFze0jjzwyy7vlllua26oXXLJkSZbme6vTyLZhTGOKajnZPrR+WceobaH2wP1J3fVovyy56OL+rn1ftdHah0uUNMmcp2XTNPf/OhdlpbDonYZT13y+fheh1bu2laGhoWz85Bcxpe8l6r7n4LDe2n+0Plm7q64quf7U3nSM+da3vtXc1tCyqpvkbxt0nOCxQMcedYvG98LjAjD6Wwv+VkXPy31H66ekey2F+C0wpjFl//33x+/8zu800xyWWt3XsXs7fU5oCGu+97pvDlhzq3n8rFq3bl2Wp/X0qle9qrmtbtpK46POm0rzM3WfyLre0047rbgv9y/tW3zf2g/1PCUXtu0Y65vf7wE4v9o+H8DlYzyPmfzYVkwn2E5Mp9hWTCfYTkxbOnF1dimAmwEcFRGbI+IjAC4AcFZEbABwZpU2A45txXSC7cR0im3FdILtxHRL7fpkSql1SDbgjLFckJfV+fW0vtrn1+zq5kL1W/wKnJdxWx3LEXE4ghUAnHPOOW3Lo+fhtH7Ip8tUnNYIQVu3bm1u67K9LgtxmXQ5SfflpRFd0udoPrqcoLpsjlBWR69sZXh4OKtfji6jS2MsZaiLfMZ2wvUOjI6UxB/d6VIXR4dSdKmY61PtVtuQ+4YugfNyvi7rqCskTut5dImSz6vuzBYuXNjc1jo48MADs3Q3Hyn2ekxptxyvS3e8HKuufDRqFbsiuv7667M87RMsbdH+xG2qfbQU/arkek2vWecWjSktLddFWOPyatm5v9YtO7aLkNhK9tArW5k2bVq2LM1SOb0u76cyMJUR8X2ryy+VGPF1dAxhW1W71fOwG0htM7VNrl9dKua0Hqf9e8uWLc1tfRaq+0RuX5UT8TXV3VdJsqguOZVejimzZs3K5AIsbdEy83jPriGB0fIVrlN9FqhEj59lep6HH364bXnUlRjbx6//+q9neRqRkKO9ltz/aXnUJStLbUpzGCB/fqucjO2oTjLItsN9tuQizxHejDHGGGPMwODJrzHGGGOMGRg8+TXGGGOMMQPDWF2djYk5c+bg3e9+dzPNOhfVZrCOVvWEGtKRNY7q+kW1nXxe1YguXry4ua36o1LIVtVLqX70pptuam7rvbCuSfWZqrvh+lJfuKUwh6pBZo2OartUS8N6Ya67fjoCHxoaytqU617rhDVEqi/TEMasf1Ot3Lx589oeqzpZPo+6D9J24H21brUOS1rJUoAY1WCxHamdlHxYar/i/qBue1SDxXrhiQ5S0i68sGocWcvJ4ZiB0e1/+umnN7ff/OY3Z3nLli1rm2Y9HpC3qY5xpXTJ7Q+QjxslfXCdH+RSkJA6N2lMSWenaT4P22MHIWzHzPDwcNbf+PsK7RNsN/oNhNrJxo0bm9usiwVGjw18rObAf0AAACAASURBVH6HUQpXzd9oaPlUb6nHsv1pv+TnguqM1S54/FG9supMeZwruabUa+jYeccddzS3WY/ab1566aVMY8wuwFQny31Pv4vQ9uc+rfrWww8/PEtzX9D257bQb5zUHvg66qJO7Z5tWfs626fOd/SZzM+cUmhmRc/Dtqv2qXXL9cV2Zc2vMcYYY4wx8OTXGGOMMcYMEJ78GmOMMcaYgWFCNb+77747TjrppGaadRyqBWF9zI033pjlabhe9tm5atWqLE81R6wVUX+F7INXNSWqT9qwYUNz+84778zyVGfMGhnVNbHWR8MPsg88INfdlPwnanlVL9NNSGWuT9aIqbaxl6SUsvKXdEIlHa/eN6N2oRq8kp/pkk5bYc2R1nVJG6vaPb43tU0tXzufh63OyzorbXvWj6m2TMvA6R6ExB4zrA9XbRpr3lauXJnlqY7xjDO2uwc9++yzs7wPfvCDWfp1r3tdc5v1/QBw6623NrdVE6rt1o3+tpRX8jussD2UbG48lMIb8zV7db1WDA0NZfbN/bvkX1TbRDWfrA1Vu9dvSvg7Ah3rS99o6Hk5X8dG9R/L9avfQHDf13FM75vHKvUrrjbGY4XqYPm5XgqhDOT9Q59v/eTpp5/Gj370o2aa7/fMM8/M9uUxRcd3LXNJN6vflXBaNb881rIvdmB0eGP+BkpDIes3HvztiH4LxPap8y+1T95X+77aNqPPa6531d6rzbEtl55/jN/8GmOMMcaYgcGTX2OMMcYYMzBMqOxhxowZmbsXfq29efPmbF+WEuiSzNKlS7M0L1vp0om6/uDlG112/v73v9/cLi01Aflyji6ZHnHEEVmalyLU9RSHhtRlKV3C4GUVXZbSOuJ60LLzkoouxaocgNO8bNNPt0Tbtm3LysXLGFo+ztM6USkDL7mVwlUDeX2W3NypnegyDx+rYUAVvqYu68yZM6e5raF4dbmI60iXHdVlGi8X6X3yedQ1GIec1vOUZCr9oJ2LMF1G57ZSW9Hx55JLLmluq0Ti/e9/f5Y+9thjm9tvectbsjweGzT8rbqP4/rX9i+FTS65ElNKEgS15VL9aR6XoU6+0M2+vWLq1KnZ+Mr2qnVSWjbV/sNjtD5PVE7x3e9+t7l91llnZXmcVld6Okaz5E3dHGr4Zb5ndUnGS8laB/rcZHdfKi3U5X2uMx03+F5U9sAhhQFgyZIlzW11H9pPXnrppcwVHksTdWzjPqHjp9oKt4WGV9c25md0yV2chlRWGQQ/+7kNW5WP+4Q+N0pyMnVDx3Mc7QMqX+BnopZv7dq1zW2VCR155JFZmscRdRPZDr/5NcYYY4wxA4Mnv8YYY4wxZmDw5NcYY4wxxgwME6r5nTlzZqbVYD3ID3/4w2xf1t++9a1vzfLU1QrrWlTLpzocPla1sKr7ZFRXybow1Uepnoe1uqrNZe2k6ppK7l1KGl8g172olqakkVYdFrtbY72Tul/pJcPDw5krIq4HvRfWH6k+T+uIz6n6xm7cc7E+TrVyWgYuu7anuqvjc2l5WFuo9qW6P75Pdb9TCndbCqu6fv36LG/16tVZmnXuqt3rN+10d9oW3IdVF6baU86/+eabszw9L7v+UVdYrJM/+uijszzVdt5www3NbdYcAqNtmccfbTdOq32WQiFrHei+JUq2q/XF+VzP3VyvW6ZMmZK1BY+BqqfmcqhmUccfrmu9T3VVye4hVf/9xje+sbmtukjVEvNzSutMw+Tyvurqittb7Uu/N+HzsrtSYHT/uP3225vbOlZxG2i9q67zsccea26rO9F+Mjw8nI0V/IxWF2Cs49VnZ8kdl9qG2hn3f7U5nm/ovETTbEs6TqidsQs1HQvYjth9GjDa7vm5pt8x6fjI59X5GD/H9BuTBQsWZGmuT9ZPF0Oyt80xxhhjjDFmkuHJrzHGGGOMGRg8+TXGGGOMMQPDhGp+VXfF/jM5nCCQ+5ljLRwwWufEfvBKoSqBcshb1q6otkd1xoxqqVSvt99++zW3VddS0uepHpfLp+FlVW/E59WQl+xrWXU/rEsCco0o+wWsC5s6HqZMmZLpi1nXq3XCflTZF24r2K+qhpNUDWjJpynXvfp9LIX9rfPdWtI/sR2rplL9LrJGrOSDs1V5GS6D9hsNccmwf8aJoJ2v2pIOXtu7FAZa21j7O+sRVYvGx6oeU+vw1FNPbW6rb2FN8/cBqvlmO9L2Vc0371vnL7hX/nl5nOM26qfmV8/POlr1aVoK+6vty7pUbV/1z3raaac1t6+++uos74tf/GJze/HixW3LA5SfRTo2sB2rf3Aun45F2t/5maZ+7bVO+HmnIXRPOOGE5rb2Qf2OgPctjTf9hsdBHZfVPy+j7c91qm3MdQbkbfymN70py+P61nDqrJMF8mc9h2EHRts2jyOlGAPqr/6YY47J0vzNB18fGD2Wcn2qDfIYo99jsX4eyP0b8zxAdc6M3/waY4wxxpiBwZNfY4wxxhgzMEyo7OH555/HmjVrmumvfvWr2wsir7x1iYbRV/u8HKfuo3R5jtMlN1UahliXetjdSEkqAOTL0hp+kJfKdJl269atWZqXMHVZQt3E8L2UlhM1xKG6VeHlBpZI9DO8cUopc1nH96bLQ2w3KmXQpZGS2zG1E17a0aUabl+tW3W1x0tdKk/QpUWWp2h5uF30mrp8yGXQZVC975KLN75PrXd1YcPXVFc4/SSl1NbNVq9CAivajrxEWQp3Xddn2F3PO97xjizvjDPOyNLs+keXljncqPZndVF4//33N7d1/NElQ65PrVvet85tYLvz9DPU8dDQUFYXXF4Ng85l0rFdpQ3cpioh47rVc2l7fuMb32huq1Tl+OOPz9Jsf7qvXpPHb3028rK8tvWhhx6apdk21KZ0GZzrQd2Uso2rRFHlHCwv6qdrTWV4eLitC011Ucb9W8uv8wCuF32mvOY1r8nSLItRCSZLbTQsu9oK17/uq6GneRzR+QTPW3TuoaGG2R50rNSxgSVHaoOcpxIStYd2sgzLHowxxhhjjIEnv8YYY4wxZoDw5NcYY4wxxgwME6r5feKJJ/D1r3+9mWbdmrrLYG1iN2616tzllHR/Ja2almHu3LnN7VLIWCB356EaMtZS6vXVdRcfW+fCiHWgqpdhfabWl5aPdXiqD+4XU6dOzfRprD9TvTe7x1GNtJaXNVeqf1MtLKf1PKxjKrmzAfI2Vf2RXrOkNWS6cdNVcpcH5HakOi9Oq65PbZPrRLV8/SQiMhvl+lbbLum/FD5W21T1zvx9gn6rwPWienB1m1SyK223RYsWNbeXLFmS5bGeUI974IEHsjS7kVy1alVxX9Yaashdri/V7urYyfWg9tkvhoaGRtX3CNqfOAx1ScMN5FrIjRs3ZnmqAWbNJYczBoD3vOc9zW0NF6x9jzW3qvHVfdkWNEQso3arfaWkV9d9ebxUN2j8XYaON/xMBYArr7yyua332U9SSplN8DNatdDc5mrnOg6yLanO/IMf/GCWvvXWW5vbK1asyPJ4/NE6U9di3GcvvvjiLG/p0qVZml0tqj0cddRRze3Sd1RA7hZPxwktH4952td4bNC+pc9Htk/WJFvza4wxxhhjDDqY/EbE/Ii4NiLWRsSaiPhE9fd9I+LqiNhQ/V+OMGAmNbYT0ym2FdMpthXTCbYT0y2d6AleBvDHKaXbI2IvAMsj4moAHwbwk5TSBRHxaQCfBvCnpRPtscceOOmkk5rpE088sbldisakkUh0+bAU1Un3ZdcvupzJ19Fr6nl5SaMUCQkou/PhJSJ1f6LLq7xMrq/zS5F9dCmMy6D3qe7CuI5Kcgn00E5efvnlbLmG5QzaDlw+vU+tP95XJQdanxy5R6PLlNxX6VInR95TqYW6z+NjNUpaN1Gd+N5UHqPLTrz0qHXCZVfXf7pUzHV91llnZXmf//zntcg9sxUgb4OSRKq0BFYnJWHe8pa3ZGleetRoa7x8WIrEpuXTJXodx3jcUFkOL/upmySVSPAy7jnnnJPlqfSCbXL9+vVZ3oYNG5rbukSptst9mOu9jWStJ7YyNDSULcGybXMkMSBvT3WXqOM39wt9nrB8Asj7u0pM3v3ud7c8JwBcd911WZr7tLod0/Gcl+x1bOJjtewll5cqsStJ8Ni1KVB2wakuErlMasct6OmYwjbKdqNR6Ljv6VK8SvR4bNLxRt2F/c3f/E1z+8tf/nKWx/IVPY/KFdh95hFHHJHlqayJ83luBuRzE20njZDIZapztcntqtIWHn9UPqHjD0uK1B1hO2rf/KaUHkkp3V5tPwNgHYBDAbwLwIiI5GIAv9HRFc2kxHZiOsW2YjrFtmI6wXZiuqUrzW9ELABwIoBbAMxNKY38BHkUwNw2x3w0IpZFxDL9NWkmJ+O1k4n6sM7seMZrK/rmw0xeurUVthN9y24mL+MdU2wrg0HHk9+I2BPAZQA+mVLKPmNMjfWLlmtWKaWvpJSWppSW6rK0mXz0wk50ec5MTnphK914gjG7LmOxFbYTXZo3k5NejCm2lcGgoydHRExHw6AuSSl9t/rzlog4OKX0SEQcDOCx9mdosPfee+PMM8/M0iPory3Wy6g2qOQepxvNr16T0xqWT9N8HdW1lN5GqeaFtTSqpSrpDutc8PB9q/aI36xqHZTKzuVrFYq0V3ai52ftl5avFBJVbYHrSO9bJ9z8Q411U3peLY/qSo899tjmtmqRSuF3VWvIWmwtq6bZDZnqjHVfLq/ep2oPGa0/DvfN2+3ola1ERKa14+3xhOBmW9FwnlqH7JaIw5ICwJve9Kbm9tve9rYsT93F8dhw7733ZnmXXXZZlmY9HNsYALzzne9sbt90001Znurz2CZf8YpXZHlqy1ymO+64I8vjsaEuxDzbfcktGx0/bltJKWU2y9pI1UGz+zfV0Kr2lHXc2n/UnRW7i1JN/y233NJyP2C0bpaP1e8atM3Y7ZSelzXI+vwoufbUlTm9JtuC1h+PDXfddVeWpzpodpNWcv04Qq/GFA2FzX1N+z5rqrX91Z45nLD2WX2OHHLIIc3tT33qU1kefwOjYX7VvRrbh45j6vqO21jnTfyDQMMil77X0vJpn+B9dW7E46O2v9ogn1fd67WjE28PAeBrANallP6asr4H4Pxq+3wAl3d0RTMpsZ2YTrGtmE6xrZhOsJ2Ybunkze+pAH4bwJ0RsbL6238CcAGAf42IjwC4H8D7+1NEs4tgOzGdYlsxnWJbMZ1gOzFdUTv5TSndCKDd2vIZvS2O2VWxnZhOsa2YTrGtmE6wnZhumdCvRbZt25bpVVgjoyJz1nCoHkY1ZaxrUd1sNzpa1q7U+U9kjZRqXkr6ZdVSsR5Oz6NpLoP64FQ/eKwRVf0on6ekAQVybTHrifoZlnTWrFlZuGv2raj+KEt+I7WtDzrooOa2auXUxzK3k9bJPffc09xmf8Ctrsm2q75bS6GQtT+wz1D2Udpq35I2uxT+VDVrrMFSDRhr3YBcnzUerW23hIQ3brcNlEMfl7TjqqO79NJLszSfS8eqa6+9trmtemCFz6O+NFUPyf3/tttuy/K4v+i3Cuw/G8htW7Xaavfsh1N997J91Pn2LIVC7hfTpk3LfFqz/eo3EWy/Os6pr2bWSepYqlpdHivUtzBrqPUaWn/ch/U5VdKna5uxrlT7s5ZB+z+j4xqPIzrOcnn1uaThjvk+JyoMNtCwX36G83irbcy2rqGGtW34/lRff/vtt2dp7v/qA5jbTetXNbXqt5957Wtfm6VZE65zGH6m1Gmb+Zmitqu+fHm81Lka+xrWbyB0XONvGUrjfFbutjnGGGOMMcZMMjz5NcYYY4wxA8OEyh6mTJmSvQbn5SZdTmDXFhrKTpcEeTlBXdGUloFUgsDLfLrMsmLFiizNbmJUhqGv+jmtS4IsQdClJX21z0tRumSkywl8rC6N8BKXLtPqEhafh5cW+hlcICKypRNedurG/Zu2Ly/raJ3o/bQL6wzkdlK3xM8yHy2fLh9xWt3J8PKNLuVommUQav+a5nvTZSe+T3V7plIL3neilrKBRv3z8ijbtvZhLlfJPZPml6RKmq9tweddt25d65vogEWLFmVpHh/1mhzqU+9T25HHHx1TFD5WJRLcD1TOo/2HJRs8dvfTZ/PUqVOz8nMZVMayfPny5raGhNV+ye1Q54KQx08NM37yySc3t6+55pq2xwF5nWndqh1z39Dxh1HZnEpBuO7UzZS2G9eJjqsc+lrLqtILXnrXZ2o/iYjseixnUBkB25HKHkrjoEpiVNa0cOHC5rY+23kcqWt/ljlxKHNgtPRm/vz5bcvO44T2b5WE8nNMxy197rIUR8dH7iO/9mu/luWxa0Agd+nH5bPswRhjjDHGGHjya4wxxhhjBghPfo0xxhhjzMAwoZrf6dOnZ246WJ+iuiHWVqlbL3U9xMeqzk91TiVtIqdVm6IaE3ZNo2FrVQPMGii9JpdXy66uUvi+VcvHbryAXN+quiDWkOk1Si5EWBfWT9czKaWszKz/VQ0Zt69qj/S+uf40T+uB89X+2G7ZBRkwuu1Zc1dyg6bpkms91RKy/hzI9bhq/6pZ433VhVrJ3ZvC5StpC3vNvvvui/POO69lntpySe+vmkJuY2033ZfrRtuU61frUPVorFXT0KPqeqo0jpX04aXxUfuE2iDvq21c0jeW9INsc8uWLWt7jvHy0ksvZd+K8LVY4wvkOkn9BkL1rqxLVc2q6i/ZfaO6HeMwsHoedafI9alhXzXNtqvtybaqGn7VmbIeVL8b0DGPNZ/qWpFdIuq3O9onO9Vu9poZM2ZkelPWyqoulV2LccjsVmn+bkht/bjjjsvSJ510UnObNfxA3ofVHrX9uX9pntY/24raQykMubYxt5WOKfpNFtef2ifPq7Tsqknn7xU43Lzux/jNrzHGGGOMGRg8+TXGGGOMMQODJ7/GGGOMMWZgmPDwxqzx4BB/pRCYrF8FRmv5eF/VhpT8kSolXeXpp5+epVkTxXotoBxCVK/P5dMQu6ql4jCH6q9TdXWsKVM/kVx/6rNP9dSsmWGNWL81WHwt1oKVNNzqN1c1ZKwpUt2S6l25/dUW+Lxa7yXdpObpvbBGUMvDtqE2rbAmTHWH2s/4vHqfXEd1Ol62B9Vu9ZPh4eHMRku6VNasq/2WwnprG5e0u2pXJR/ACl9Tz1NKa7tx+9eF/C75ZFV9cCmkO6PfS6gNcn1yno5/vWTq1KmZNpHHCh1L165d29xW7St/6wF0p79kvStvA8DKlSub2/qNgZaPx2gNk6v+g3l857Dseh5te20LHrtU86v3yc8/Lc+rXvWq5rbqqTWkLpdh8eLFmEi4L3JoXR1T2OeyjnvqC5s136odVju77rrrmts6v1iwYEFzW/3o6rcr7Gde21jrm9Oq4+XvSnS80ecuj486v9A+wmXi78GA3LZ1zD377LOz9J133tlyW/sS4ze/xhhjjDFmYPDk1xhjjDHGDAwTKnt48cUXsWnTpmaal8f0lTdTct8CtF8ib5Uea+jVJUuWZGl2RcRLC62uWcrj5W11caPLh7zkwvIRYPSyCS9/6FINp0vu1ICJlTqMMHXq1Ezywct+GqKRbaNuiZ/rXm1I66jkgo7TKmUohbctuY8BymGceWlfr6E2zctS3cgeSqGa68I4cz1MZHhjDUXKdahLXqWleq0XrkMdf0rhjUv71o1NJdlDSe6jS5QlmZWWna9Tcv0IlF2o8Xn0mlq3vLz6wAMPNLf7Gd54+vTp2djB/eLUU0/N9uWQxj/4wQ+yPJWQcbheXVZm92BAvtStYZJPOeWU5ra6udPldF6CVkngsccem6XZnZXKDPg6uhyty+ksGVJZn9ofu7NS6Z6mGe07LHWYSPeJQHvXjaU+q+2mbiU5ZPH73ve+LO/yyy/P0mxLZ555ZpbHbaX9UOcBLDtQ+1T4XlR2x64W9Zra/iyLUZvTMvA4q3IavpcNGzZkeZp+4xvf2NxmmciVV16JdvjNrzHGGGOMGRg8+TXGGGOMMQODJ7/GGGOMMWZgmFDN79DQUOaCi3WrJc1vSWMHlPVm3egPS/uqXpN1VxpCT/dlVyAaipa1Napr0pCmrClS3ZVqtvheShrpunDQrOWcKM3vbrvtlrlzKbVvycWW3ktpX60/puS+St28qG6thNoxayFV0826KtVGqa635M6v5LatpDPVtlftFuerVr2fzJo1CyeccEIzXQqLzmhfV1vheim5zNN8bYuSq7OSBq9ku0DeL0vuE+tCKpfGgpJ7tdJYqfWl4yOHE+ZvDtQtUi+ZOnVq1lf52wYNQ8suJbWv/eQnP8nS3E/vu+++LE/1jqz55HCsQP69hz4j1LUn173WrbrF0v7OcHvqNfU8XA+6r9ox98GlS5dmeatXr257HLsCA8qhaftJRGT9mO1S3ZfxPegzWWGb029XXvOa12Rp1sLrfILbX/uM9nduY9ZtA6NDDXO+htTm86geWNM8xtR9D8V2VXIbquHA1U0b2wrXV/E7lrY5xhhjjDHGTDI8+TXGGGOMMQPDhMseeHmZX12ry6jScmHJXU+v0Guqu56S7EGj2nAUGF1a5OUlXuoARi8ZlFyc6HJHycUJ17Uur2pdtnP50m/4frhMuqxcisRVWlbW+iq5qCrJCPQauiReKkNpOV2Xddje1LVMyd2a3ldJFlRyiad1q/fJy1e6DNZvuI55u2TbdbbM+2r9apvyvppXko6UXIkpJZmJ9tlShDeF8+skY6UIb5yn7paWLVuWpbk+OeJXN5KhbhkaGsrG6ZJbNV62/9CHPpTlqSvI2267rbmtzwF1fcW2wNIKzdPlaX32cD1p1DZNs5xCxw3uwyrfKi0rK0cffXSWZhmSnoddnWqUrh/+8IdZ+oorrmhun3feeW2v32uGhoZGuQAdgZ/lQN5WKjFRiQSP4bqMr33vda97XXNb5TN33313c1vdo5bcKapEQsvAfVrHG76OtqnKcjhfy659nMtQckur98n1A+Qu/bh+tGyM3/waY4wxxpiBwZNfY4wxxhgzMHjya4wxxhhjBoYJ1fyqCxHWBqrGhsOuljSXI+cdQfVvYw21WgrfCeShK1UvpdoV1rWoDoy1Kho6U7U1fF6tE9XosL5H3XiV8vSadSER+0FEtNX8ltpX27pkN6VwxkCuS1StVCn0cUmPrnah+id20aL6Me4rel+qSeVj6+y/lM95ep8lDXw/tZtKRGTX4zrUPsz7aZ7eH7eV5pVcy5W0pNq3SiGL61ydcf2X3BuVtMJKXUhlztc+cddddzW3OYwvMFr7yG6duL7UpnpJSimrf76W6njXrl3b3FY96znnnJOl+VjVxerYylpo1fWyBlg189qf5s6d29xWV2zqvqoUnp7bV7WR2hYHHXRQc1vbU8vH9azu3zhsstqb6pW5DOr2s5/stttumVs6DlOs7sz4/nQeoOMyP991TNFQyNxueh5O67cX3Yx5OufisVPtivXi2hZq52xXOk7oviVXfFx2DYutrkD52ym25dK3HX7za4wxxhhjBobayW9EzIyIWyNiVUSsiYg/q/5+eETcEhEbI+JbEdG/n+1ml8C2YjrBdmI6xbZiOsF2Yrqlkze/LwJ4c0rpBABLAJwdEacA+EsAf5NSOgLAkwA+0r9iml0E24rpBNuJ6RTbiukE24npilrNb2oIRUZEFNOrfwnAmwF8sPr7xQA+C+DLpXNNmTIl08ux7kV9zrHeQ3V0qnFrpw9tBeteuvGrqRod1q6oXkf98/K9qS6s5OtY75ProRSGGCjfG++r96X3zek6/WivbEV1nCXdWsk3od4bp+s0v5xf0j6q/rMUCln3VY0YX6fkn1frgPXxQLmdSv1Dy1fyB826Q6CstVV6OaZo2Up+fll/pmUshf2t0/9zvoZUZo2glqcUClntUc9b0rOXNMhz5szJ0iXfx6r7ZM3iypUrszz+loH9vALA4sWLs3S78Kyt7KaXYwrXN2tjOZQ6ANx8883N7VJYewA499xzs2swWvfcTzV87KpVq5rb6tNU+xqjdqHP0VNOOaW5rWGc169f39zWcLslLaY+31asWJGl2Zev+hZmu9YQyqqJZ1tVu1V6OaYMDQ1lmmx+vqvfWn6esy4aKOtdS892IB83VCfLdqbPfbVX1srqM0W17u2euUB+3zpOlJ67uq/Of0rfSHB/VbtW+Jpsc+MObxwRUyNiJYDHAFwN4B4AT6WURu56M4BD2xz70YhYFhHLtLLN5GOstsJ2UmfoZtenV2OK/vA0k49ejCmlIA1mctCrMUUnm2Zy0tHkN6U0lFJaAmAegJMBLK45hI/9SkppaUpp6d577z3GYppdhbHaCtuJftlpJh+9GlPq3giZXZ9ejCm6ymImH70aU0pvvc3koStXZymlpyLiWgCvBbBPREyrflXNA/BQ+ejGsha/nuZX6brkUVq668aFVcllUGnpW5cd1aUIuwnRN5UlaYPeJ7+Wr1s2Y+pCrpakDZzWa+pSLC996jJOifHYSkopu1ZJglDKK1HnFo3rvtQupfoC8qVOXZLSZSg+l66S8Hn1GiWZQV1I3ZKrOLYp/eE6e/bsttfsph3GO6YopT7DbVwnkeF70DZWSuGkud66CdOuy3X6QB5r2PFS/WgdPPzww1maXYDpNc8444zmti7Tl+yqNP4p47GV6dOnZy66ODyquhbjsWfz5s1ZnkqM2HXXO9/5zixPx3qWM6irsw0bNjS31eWljvV83pLEDsjb8O1vf3uWN2/evOa2Sj/UJSdLJDZu3Ni27EDuCk3ri9H71H35Pu+9996251HGO6YMDw9n7rJ4dUmfgfzjm92fAqPdzrGUoa6N+Vz6LCiFLy+5RNTy6LjG96xu0EpjoM53eJytk2PyWKBjHN936Xmo5+G8ogSwbc72gw+IiH2q7VkAzgKwDsC1AN5b7XY+gMvrzmUmN7YVFrxzOQAAIABJREFU0wm2E9MpthXTCbYT0y2dvPk9GMDFETEVjcnyv6aUroiItQC+GRF/DmAFgK/1sZxm18C2YjrBdmI6xbZiOsF2YrqiE28PdwA4scXfN6GhqzEGgG3FdIbtxHSKbcV0gu3EdEvUuSXq6cUitgK4H8D+AB6v2X2Q2RXq5xUppQP6cWLbScfsKvVjW9nx7Ar1YzvZ8ewq9WNb2fHsCvXT1k4mdPLbvGjEspTS0gm/8C6C66eB66GM62c7rosyrp8Grocyrp/tuC7K7Or105GrM2OMMcYYYyYDnvwaY4wxxpiBYUdNfr+yg667q+D6aeB6KOP62Y7roozrp4HroYzrZzuuizK7dP3sEM2vMcYYY4wxOwLLHowxxhhjzMDgya8xxhhjjBkYJnTyGxFnR8TdEbExIj49kdfeGYmI+RFxbUSsjYg1EfGJ6u/7RsTVEbGh+n9O3bkmG7aVHNtKa2wnObaT9thWcmwrrbGd5ExWO5kwzW8VdnA9GjG3NwO4DcAHUkprJ6QAOyERcTCAg1NKt0fEXgCWA/gNAB8G8IuU0gVV55uTUvrTHVjUCcW2MhrbymhsJ6OxnbTGtjIa28pobCejmax2MpFvfk8GsDGltCml9BKAbwJ41wRef6cjpfRISun2avsZAOsAHIpGvVxc7XYxGoY2SNhWBNtKS2wngu2kLbYVwbbSEtuJMFntZCInv4cCeJDSm6u/GQARsQCN2OS3AJibUnqkynoUwNwdVKwdhW2lgG2lie2kgO0kw7ZSwLbSxHZSYDLZiT942wmIiD0BXAbgkymlX3JeauhS7I/OALCtmM6wnZhOsa2YTphsdjKRk9+HAMyn9LzqbwNNRExHw6AuSSl9t/rzlkpnM6K3eWxHlW8HYVtpgW1lFLaTFthOWmJbaYFtZRS2kxZMRjuZyMnvbQAWRcThETEDwG8C+N4EXn+nIyICwNcArEsp/TVlfQ/A+dX2+QAun+iy7WBsK4JtpSW2E8F20hbbimBbaYntRJisdjKhEd4i4m0A/hbAVAAXppT+24RdfCckIk4DcAOAOwEMV3/+T2joaf4VwGEA7gfw/pTSL3ZIIXcQtpUc20prbCc5tpP22FZybCutsZ3kTFY7cXhjY4wxxhgzMPiDN2OMMcYYMzB48muMMcYYYwYGT36NMcYYY8zA4MmvMcYYY4wZGDz5NcYYY4wxA4Mnv8YYY4wxZmDw5NcYY4wxxgwMnvwaY4wxxpiBwZNfY4wxxhgzMHjya4wxxhhjBgZPfo0xxhhjzMDgya8xxhhjjBkYPPk1xhhjjDEDgye/xhhjjDFmYPDk1xhjjDHGDAye/BpjjDHGmIHBk19jjDHGGDMwePJrjDHGGGMGBk9+jTHGGGPMwODJrzHGGGOMGRg8+TXGGGOMMQODJ7/GGGOMMWZg8OTXGGOMMcYMDJ78GmOMMcaYgcGTX2OMMcYYMzB48muMMcYYYwYGT36NMcYYY8zA4MmvMcYYY4wZGDz5NcYYY4wxA4Mnv8YYY4wxZmDw5NcYY4wxxgwMnvwaY4wxxpiBYdJOfiPivoi4MyJWRsSyHpxvn4j4D70oW811LoqI97b4+9KI+F/V9ocj4ov9LovpnMo+vhMRd0XEuoh4reQfEBG3RMSKiHj9jiqn2TmIiKOqsWnk3y8j4pPjPOd/6lX5zNiJiD+KiDURsToiLo2ImeM834KI+GCvyle4zk8jYmmLv78zIj5dbX82Ij7V77IYICI+UdnQmm7GBm6vLo5ZEBGruy/lrsuknfxWvCmltCSlNKpDj4F9APR98tuOlNKylNLHd9T1TS3/E8CPUkqLAZwAYJ3knwHgzpTSiSmlGzgjIqZOUBnNTkJK6e5qbFoC4DUAngPwb+M8rSe/O5iIOBTAxwEsTSkdB2AqgN8c52kXAOj75LcdKaXvpZQu2FHXH0Qi4jgAvwvgZDSeJ++IiCM6ObZde0XEtN6Wctdmsk9+2xIR59CbuB9HxNzq79kv2+qX1wIAFwBYWL2l+Vw0+FyVf2dEnFftf3pEXBcRl0fEpoi4ICI+FBG3VvstrPZbEBHXRMQdEfGTiDiMindmRCyLiPUR8Q467xUt7uOAiLgsIm6r/p3at0ozLYmI2QDeAOBrAJBSeiml9BTlLwHwVwDeVdnPrIh4NiL+R0SsAvDaiPh/Kltazb/yI+IzEXF3RNxYvUXyW5fJxxkA7kkp3c9/jIi5EfFvEbGq+ve66u//OyKWV2+EPlr97QIAsyr7umTib8EQ09Boi2kAdgfwMGdGxO9WY/Wqauzevfp7tuoXEc9WmxcAeH3Vtn8UETMj4p+q58mKiHhTtf+HK9u4Ohornx+rxpUVEfHziNi32m9Jlb6jsq85VLzfrq6zOiJOpvOOWmmMiIUR8aPKFm+IiMW9q8KB52gAt6SUnkspvQzgOgDn8g6FOUyzvSqb+vuIuAXAX1Xzm29ExM0RsSEiflcvXM1NboiI26t/I+PO6dFYHRhZ4bwkIqLKe00171keEVdFxMH9rZ4ekFKalP8A3AvgdgDLAXy0Rf4cAFFt/zsA/6Pa/iyAT9F+q9H45b0AwGr6+3sAXI3GL/u5AB4AcDCA0wE8VW3vBuAhAH9WHfMJAH9bbX8fwPnV9u8A+N/V9kUAfoTGD5NFADYDmFmd94pqnw8D+GK1/S8ATqu2DwOwbkfX/aD9A7AEwK1V260A8FUAe8g+zTar0gnA+6vt1wC4E8AeAPYEsAbAiQBOArCyav+9AGxg2/S/yfEPwIUAPtbi798C8MlqeyqA2dX2vtX/s6rxab8q/eyOvhf/a47zzwLYCuCSFvn70fafA/jDavsiAO+lvGer/5tjf5X+YwAXVtuLq2fPzGqM2ViNFQcAeBrA71f7/Q3Z0h0A3lht/xd6Jv0UwD9W229A9byT581nR8YgAD8BsKja/jUA1+zoup8s/9CY/K4HsB8aP6BuBvAF2afdHIbb6yIAVwCYSu23qho79gfwIIBDQPOb6nozq+1FAJaRHT4NYB4a85ObAZwGYDqAmwAcUO133oh97sz/JvNr8NNSSg9FxIEAro6Iu1JK11P+PADfqn6hzEBjstzV+QFcmlIaArAlIq5DY7LySwC3pZQeAYCIuAfA/6mOuRPAm6rt12L7L7lvoPFmcIR/TSkNA9gQEZvQGODacSaAY6ofYACwd0TsmVJ6tnCM6S3TALwajYfYLRHxPwF8GsBnCscMAbis2j4NwL+llH4FABHxXQCvR2OAuTyl9AKAFyLi+/26AbNjiIgZAN4J4D+2yH4zgP8LAKpx5unq7x+PiHdX2/PReEA90eeimg6o3qK+C8DhaLwE+XZE/FZK6Z9pt+Mi4s/RkNLtCeCqLi9zGoAvAEBK6a6IuB/AkVXetSmlZwA8ExFPo/GSBWg8e15VrVLtk1K6rvr7xQC+Tee+tDrv9RGxd0Ts0+Y+9wTwuur+Rv68W5f3YdqQUloXEX+JxtzhV2i8BBmS3Tqdw3y7Gj9GuDyl9DyA5yPiWjSkFSspfzqAL1YrlkPYblsAcGtKaTMARMRKNCbNTwE4Do15FtD4of5Id3c88Uxa2UNK6aHq/8fQ0NKdLLt8AY1fR8cD+D00fjkDwMvI62UsHyu8SNvDlB4GOvrBkWrSzBQAp6RKP5hSOtQT3wlnM4DNKaVbqvR30JgMl3hBBiQzmPw6gNtTSls62TkiTkfjB+9rU0onoLHSMK4PqkxPORPAvSmlrSmlbQC+i8YkkbkIjTf9xwP4M7R49kTEFDQmNN0yUc+eKQCeoufOkpTS0d0V1ZRIKX0tpfSalNIbADyJxptgpt0cRvmVnrom/UcAtqChNV6K3A7ZvobQsKkAsIbs4PiU0lsKt7ZTMCknvxGxR0TsNbIN4C0AVlcaqI9Vu81GQ5IAAOfT4fehmrhExKvR+AUPAM+gsZw0wg0AzouIqRFxABrLRLd2UcybsP1DiA9V5xvhfRExJRr64FcCuLtwnv8D4A9HEtWvNTOBpJQeBfBgRBxV/ekMAGvF3krcAOA3ImL3yl7fXf3tZwDOqTR+ewJ4Rz/Kb3YoH0D1tg0AxGZ+AuDfV3+fWr21mw3gyZTSc5XG8hQ617aImD5B5TateQDAKVVfDjTGgnUR8Rf0tn4vAI9UbfUhOvY+NCRQQGM1YKQtWz17PgQAEXEkGnK30jOiSUrpaQBPxnaPM7+Nhp50hJFvV04D8HS1f6vz/BLAvRHxvmr/iIgTOimD6Yxq1RrR+B7oXAD/0uEcpo53Vc+U/dCQMtwm+bMBPFKtPv82Gm9yS9wN4ICoPBxFxPSIOLaL8uwQJuXkFw0N7o3R+JjoVgA/SCn9CA35wMjy4GfRWLJZDuBxOvYyAPtGxBoAH0P1ayul9ASAn1UfAnwOjbfJd6Chn7kGwJ9Uk6BO+UMA/3dE3IGGgX2C8h6oyv1DNDRbLxTO83EAS6Px8cJaAL/fRRlM7/hDAJdU7bkEwH9Hbm9tSSndjsbboFsB3ALgqymlFSml2wB8Dw07+yEaS5ctH0Zm16P6oXMWGm8HR2Cb+QSAN0XEnWh8u3AMGt8DTIuIdWh8CPVzOvYrAO4If/C2w6hWf76Dxvcmd6LxjP0KgOMBjDwfPoNGP/8ZgLvo8H8E8MbqufVabH9jdweAoWh8IPdHAL4EYEplF98C8OGUEr+Rq+N8AJ+jseq/UN4LEbECwN8D+EjNeT4E4CNVedegIfcwveOy6pn+fQB/kBofUXcyh6njDgDXojF2/NeU0sOS/yUA51ftuhij3xxnpJReAvBeAH9ZHbMSo1c7djpGxNIDQTS8JZxbNZYxfaUX9jai347GF+HXo/Hx5u09K6TZqfAYNTmJiKtSSm/d0eUwuzbjHR8i4rNofEj5+Z4WbBdkoCa/xuxqRMS/oPHGbyaAi1NKf7GDi2SMMWYXxJPf7Xjya4wxxhhjBobJqvk1xhhjjDFmFOOa/EbE2dGIPrUxuowlbQYL24rpBNuJ6RTbiukE24lpxZhlDxExFQ1PCGeh4ef0NgAfSCmtbXfM7Nmz09y5c5vp4eHh5vbQUHuXp7xfq7SUK0vr/XG+7lvKK51nypQpbfMUvc8XX9z+ke7uu+9ePA9fR/OmTs29kXAdadl139I12/HQQw/hySef7Gjnbm1F7aTm3G3z9L5LdtMN2t6dlqdkb5rutB26Pc+OuOby5csfTykd0ME5ux5T9t9//7RgwYJmmttcy8F97fHH84+jtV+OtR3HY2N8ntJ4A+R9eLfd8tgC06dv93b28ssvZ3l63hde2O5Ihuun1TU7pa7s7Xj22Wfxwgsv9GVMmTZtWuJ6Kdkr92+tP4X35fO3gttMxxCus9JYDgDTpm1316t1vW3btiz90ksvtdxW6sYJ7h91+86Ysd0tLJdVz6N9Tu241EaPP/5438aU3XffPe2zT8vYHl3RzdyqX/v2g7rrj3XcKJ1Hr1l6BjNPP/00nnvuuZYFGk+Et5MBbEwpbQKAiPgmGq5O2hrV3Llz8Xd/93fN9LPPbo/F8Mwzz2T78s3qoPzcc8+1LZRWvA4cPLDMnJn7hG43OLY6D1f+HnvskeVx51eeeuqpLL1p06bm9oknnlg8D5dXB9rZs2dnaa4zfsABwN57793c1vvU87abKJ977rkt/96Grmxl7ty5+MIXvtDyRGr0PLjW/Uh6/vnnm9t1D2jO10Gaf6Ro/Wiaz6N1W7K/UueuuybXiV5Tbar0oCoNPqUJV4vz3I/O6HpMWbBgAW655ZZmmsup5di4cWNz+8ILL8zytF+WxgK9d24rtjE9tu6hUJpEqz1wf3/lK1+Z5c2fP7+5/eijufdFbcd169Y1tzds2JDlqX1yP9DycHnrys72yvd8+eWXowu6spXp06eDfyTxvZXG2ccee6xt2YF8LDjwwAOL++6113ZXvXvuuWeWxxNTHp+B0eM3T8x0bHrooYey9MMPb/di9cADD2R5fKzatPYdfj5re+qxXM9z5szJ8n75y1+2PCcAHHbYYVl61qxZzW0dx/7hH/6hb2PKPvvsg9/7vd9rmVf6cat5pRd6Smlf7bP8g6zuBc9Yxx89L5dPfxDWPY+YTietdeXRPttuHvBP//RP7cvScUlGcygacaFH2Fz9LSMiPhoRyyJi2dNP20XpgFJrK7YTgzGMKVu3bp2wwpmdiq7GlLo3uGbS0vWYUnq5ZiYPff/gLaX0lZTS0pTSUn07acwIthPTKWwrBxxQu/JpBhS2E32TaQzDtqLyQzM5Gc+I8BCA+ZSeh+2h9lry4osv4t57722meamntLRcp/fgtC7B6Hl5+UT35Vfpeo2SJrC0fK37HnTQQVkeL1nW3ScvA6l+S9+W8mB/+OGHZ3n8FoSXoYDR98llGIfWqCtbSSllSxdcf1o+vs86LRrfS+k+gdw2VHbD9acPVV3yKem0S8tkpWXlksxBj60rX6faxzqZCJdPl2m7oOsxJaVU1Pky++23X3NbH3D33XdfluZlaV1i0zpkW9ExhZd26+QAPG6odlPrlN9Oqexq3rx5zW1eggaAzZs3Z2leCtexQK/J5e9m+bJkg6WlzRq6spXh4eG2+uaSrEXzWKoH5LahcgVtQ16l+MUvfpHlcZ2o/ETfRPI4oW32q1/lwbhKOl+ub7VxftZo+fQtupbhkUceaW6rtp6vo8ftu+++bc+rEoku6HpMAdprvbuRMpQkEnVa7U7PW5oL6XX0mqX+VirfeL5r0Hrlc2nf2rJlS9vzHHXUUVmax/PS907MeN783gZgUUQcHhEzAPwmGqFYjVFsK6YTbCemU2wrphNsJ6YlY37zm1J6OSI+BuAqAFMBXJhSWtOzkplJg23FdILtxHSKbcV0gu3EtGNcQqiU0pUAruxi/+xraF5KUalAaemptAxZ8rRQd01entOlzdJyR92XsqWvH/nYuqUQLkPdfbKrMNVF8vKCLjV041auG7qxlYjIlm9K0gHO03rWZVvOV1c2peUY/TK7VH/8RbceWycdKEkQSq6tuvH2UHLLpzbO9qfLp914x+iGbseUEloObouDDz44y1u7Nv/4m+tQ+5raCi+hq12xPahHCe1bJbdUmuZzqeSJ7eO0007L8tQbBS8t6nhTcpNWkvco2g58bMltVx3d2MrQ0FBWT2y/ei+6HM/omMLyAB33S94ydF8+r0pyNM0ePLSNVALDdqNSBi6Dnkfbk/uOjnlqN+whQ8/D0iMtj368yv1qPO69xjJPaSelKo2f3ZSx5L4OKLvYK8naSmXQfljyDFFCy1aS3ek1Sq4W2fMVkEvRjjzyyOI1x+JezRHejDHGGGPMwODJrzHGGGOMGRg8+TXGGGOMMQPDhDo/nDJlSuYOhrVWJZ2gakxUg1nS8XajES25zSq5KaqLcFLSw/G9qbawzt0ao75xWfulOjXWUmndlsJaMv0Osdjp+bl8dTpt1phpNKF77rknS7N7IXVhxBq8OldDbFOqAdT2Zq1myd5KNq3Hqpukkra5pDHvJtzuzoLWIY8Nhx6a+7lXrWTJ1ZlG0eL+pZpa1RYzqgHm+q/TTXM7qgac21xdm919991Zml1u1UWyK7VxNxHe2mkWe/V9QSuGhoYyd1kljSDfZ50ukttQnz1qU4zaH+sbVTeu5+E21bpV++Oohjr+cH2UxiJgtLtHRu+bbVPzOK3PLHaRBuT9SsfgftNOn91PG2XGOp6OJ0R9p/vW2Xnp+aPPR37uqmszHjtV81v3zVMn+M2vMcYYY4wZGDz5NcYYY4wxA8OEyx74lTkv2eiyCr9mV5co+pq9m4hWpbySPKFu2ZcphdIsuYjSJRVdUudoORq5SeuktEzFS3W6vKppXv6ayKXtkgSFKckjSq7sdPlf742XHtV9GZdnzpw5WZ4u65TaV2UGvCxZ2rcu2lE30XhKrs4Y7Rtq46XIif2mnQ2UpEuHHHJIlscumIB8zKlbAmbpwJNPPpnlcb888MADszxdymXbeeKJJ7I8lS7xsl8pHOvDDz+cpVXew/ei7a+2zPWg7c/pUh4wNrdEvabkoqok99F74YidJ554Ypan7cK2wa4ogVwCoPIElQewZEslgCp7OOaYY5rbOh6ybag8Ru+bnz1qi3qfbJsl6Zn2K71vvs44Irx1jUYY7dR1Y91YW5pf1EUn7ZTS81Btt3Rf3Zxn4cKFWZrd661YsSLLW716dZZmqYvOYRYtWtTc1rGyFK2u0/bym19jjDHGGDMwePJrjDHGGGMGBk9+jTHGGGPMwDChml8g14uwBkb1cKz/qHNrwVqbOr0ZMx53XazJqQvhxxqUUnhEdQuyfv36LM16KQ13yrpDINeiqnaYw0hqWUvuoSZK8xsRbe1EKdWtaoj4nOpmSt0LtQuvrGieapM4X+taNZXcLtpm3C4lvROQ36fqn0quh7Ttub3r3LRxvu7bb0q6aobzNOS3aoDZPrR+1a4efPDB5rb2YR7X1L2eXpNRra6GMOZxQ22X7UpDxqpdcfnq3BJ1qg/W+uo0HH0ppGuvKY39JR283gtrbFULvnjx4ixdcgHF40QpXDCQj/26r2qAX/GKV6Ad8+bNa26rLV5//fVZmvuDtpOWgZ9TOh5y+bQP6rOa61PdYPWbTucGpXG5tG8dpWdOiVIZ6vTrnF8Kd63zgNKzVL9dKGnL2R6BspvIXrha9ZtfY4wxxhgzMHjya4wxxhhjBgZPfo0xxhhjzMAwoZrfGTNmZGEdS7rOUohJpaT5LWlDVNfSqX84RY/Te+EylPwFP/vss1me6reOPvro5va+++6b5WloSK4/1fm1C90IjNa0cX6/QxqPUNL81oX2ZdQ/Jusb1VelaqZZC1unsWVU78r6PPXBWfL5rJpu1giq32ttQ7brkt9moKzp5jy1i1J6Iv24ppSyeyxpmLlcJd+kAHD//fc3t0vhO4GyVpX7nmpo9TsHtsn9998/y1O/3qwB1nthjeiaNWuyvEcffTRL87cBatdqg1zPqvPkfbVPav3wdfg8es5+0qnvcLULbReuE/Vh+spXvjJLs96R/eYC+fhT+lYByDWWWr6ST3zt+1x29XOt9nbvvfc2t7Xu1K65D6qul8ugdqv3yXpR1Y5OJKXnd6/o15jZjQaY6SZ8PdsGkOvM1Zb1vKw1P+qoo9pes/QdldLpt0l+82uMMcYYYwYGT36NMcYYY8zAMKGyh6lTp2bLbLwc1k24um7CEJfckOl5S/IKXZLj1/d1oXJLy9B8L3oedVPDywK6RKSSCV5u1fLwUkTJFdyOQmUP3GYl2UMp5C6Q14O64NEl3pKNleyktMSrtqmukXgZUJczedmvtOSsqBssPW+ny3hqt1oGPs9E2tQzzzyDH//4x8300qVLm9u6lMv1fdVVV2V511577ajzjqBLwLp8XArnzCFt165dm+VpHXK9qeRJ03ystmHJbZbaJ/cRXYq/7777snTJLRmfR126qe3wWMVSj37KqiIiGztKy8xcZ2pDGpZY5VKMjhMPPPBAc3vdunVZHtubthnL3bQMdW42uU1VZsDtovIYDi0LAGeccUZz+8Ybb8zy1A0f26raFNuJSs/mz5+fpVk2omHD1f1bPymFwm6333jpR1+ok++xLemzk/fV9tbzsC2rTIhlrwBw3HHHNbd1jOPnmtat2is/248//nh0gt/8GmOMMcaYgcGTX2OMMcYYMzB48muMMcYYYwaGCRd8tgtFWtJR1ul4S66GdF9OlzS/elxJ56LazVI4ZtWSss5PtZLqCol1L6rz1PKWwvOWXIcpfN6xhlwcC+00T9rWXPeqlWN3VUDudueEE07I8lQXzffNGiYgd+1T0ncD+X2oGzS9Ry6/1jVrD9W1kNpCSWOulFxUdQOXvZswnuPliSeewDe+8Y1mmvW/J554YrYvu5q75pprsjzt39xW6j5Kw26yHptDHQO5fapOsRQKWa9Rct+jds9tzt9YAKNtmfu/ajB1bODxSXXO3Le07Hqf7fStE+VKse5apbpWd4Xcfw466KDiNVh/f8opp2R53GeWL1+e5anLRm5TrVuFxwItO59XNZ4aTpjvTd2XaX2xzatWl110qpa+pGtXm7rrrrtgRtONW06Fx389jt2ZqWuzk046KUuzzanmV/flcUSvyedZtWpV2/IAwJIlS5rbnc5v/ObXGGOMMcYMDJ78GmOMMcaYgcGTX2OMMcYYMzBMqOZXQ5G20/8CZd963fhgLflBVK0c6/5UK6m6Xtaq1IUIZj1Vye/mXnvtleWp795NmzY1t1Vnpfty/ak+j+tEzzMezVCvGBoaynSBrGtTbSanNYyz+uA89dRTm9slnSSQ37fqePm83diJauVKeiS125IPWNXysXZTdZxKqQ9ynl6jxERqw19++eVMc8t2o7pFvgftL2rnXG91/Zv9Ztf5j2ZUu81lUjtS3WfJv2wpLLXql1mHzGFzgdH3zfeiYwqXT/P0PKwD1HboJ+20gKW+pmj7Hn744c1tDTmvYwPblI713C5HHnlklqf7ctlVq6tjFbeF6r0ZPY+2C/cdvcYjjzySpUs6ZO5nqoFXn8CsF67TNpsGYw1nDOT9m0NxA8CyZcua26VvATSt/UV9OfPzW8cf1vmuX78+y1Nf4gsXLmxbvnb4za8xxhhjjBkYaie/EXFhRDwWEavpb/tGxNURsaH6f07pHGYwsK2YTrCdmE6xrZhOsJ2YbulE9nARgC8C+Dr97dMAfpJSuiAiPl2l/7STC7aTPegr+dKr625kEJrH1y9JLTQsrC63M7pEdM8992Rpdn+kLjr4vGeffXaWp67O5s2b19w+5phjsjxe+gXyZX1d+iy58tF67zQkaMVF6IGtPP/881n4QpYzaF2XXJ1p+6rbJ0blARwKVN218PKMSi10mbsks1Hb5PLqUlIpxLMuZfOxJRduWiZdaufrlFz0ab4uobbgIvRoTEkptZUWlFzC6b1q2/AyvvafRx8HlUWXAAAgAElEQVR9NEuzTWo9cf3rcrG2G8snVOZQkk+U2kbbX5cheTlb66RkD2qDXL46V3c8tnKfbLMsfxF6YCtTpkzJ6rvkmo+fEeqe8A1veEPbfbXN1G5U9sTwdTS0sNY125GGLFZ5EpdP257Pq2UvhaTW+9Dl6q1bt7bcBvJ6v/nmm7O8kuRuop49rejUdeN4XDyWnrvjoTTf0XZj16AqM2CZFYedBsqySn1OqITn/2/v7GLtuMoz/K1zYtSiVmpCg7GN7YSQOE5wmoBJgISfhARBkUhAqLSVIEgguCxSL0C9alGL6E1briohgRSJqCFSEQRygQiYNBBkkpjYITbEboRNQn5AgAoXtBCvXpyT4V3P2fub2cf77ONz9vtIiBmvfWbWrPWtNZNZ77yfxgfTqasMhmnFL7/88mZfx4GeP5N69L75rbX+V0RQYHZzRNy2vH1bRNzSdxyz+XGsmCE4TsxQHCtmCI4TMymr1fxurbU+r3J/OiK2jvthKeVDpZQHSykP0vDazAWDYkXjhG/szFywqjmFb2zNXDDxnDLLxCvmrGFVc8okH/eajcsZf/BWl94rj323XGv9dK11f611f7bsbDY/WaxonOjyr5k/JplTBkgszCZm6JwySwcSc/YxyZxCOZLZnKzW6uyZUsq2WutTpZRtEfFs71/Ekv5inB4jS8PKskwP06eV0XNmWhXqT+67775m/yc/+Um3zf9S5JtLrROvRbUqhw4daspYh6uvvrrbZnpeaoBVi3rkyJGmTC15aM+TpgOcIC2yMHGs/Pa3v22sVobq8/p045kOOksRzIdx1VGyP6nT1tjgW0rGX5amWx/y+sYDdYBKltI7sxPKdOIRuT3UQFY9p2i76TZjRfs8a4eI9nozS7KI1pIp03Wznzj2tm/f3m1TZ845RjV47O/sWwr2k+pv+R8SPGf2AKl6XerzGDtaX/2OgVrqhIljZcuWLU2K3nH2eBH5PYLfcyh79uxp9pnu+Prrr++2+e2HxljfWNK5iv1LXa+2Pa9F+5ffuNBKT+cG2lXxb++9995um3aDSp/11hR0r6uaU4bUbdLfTXqc1R43s+zkyjst6tR6jv2vY5/noC2axiDvnbTp1LjicfW3TG/9ohe9qNkfNybOSPM7hrsi4tbl7Vsj4kurPI7Z/DhWzBAcJ2YojhUzBMeJGcsQq7P/iIjvRMSeUsoTpZQPRMQnI+KmUsrxiLhxed/MOY4VMwTHiRmKY8UMwXFiJqV3rbLW+ldjit68mhOO+/Agsx0beoyIyWzQ1IIsorX34JIA63PFFVd021zm49KT7nOJSF/tHzx4sCmj1EKth2gT8/a3v73ZV+saLmHokhvryqVPbb8+3dy0YoWZAJVsKZv1Y5/p8sxVV13VlPFv1YKFy7G6RMklcC4tjrNgGbWvy5CUZWj9skxsEa1tEuvDWMiygWXZ4biUrX/bp5mb9pyi/az1ymQwrCN/q+3CTFQcI2rfwzajtY/CftTxTQs92hJpLO/YsaMp02V8SmlY98yWiGMis+3T+nF5ld966HE1bkbN+dOKlcXFxWapVJdJMynaBRdc0JSxf/U4lE8wxnSf/aBtS6kA7xl6Heyz7L5JWZPOY7R027t3b7OvfUrbT84pOo9l1zlN1nJOybLNDi0bVb5asuNQqqTynh/84AdNGeUr73znO7vtz33uc02Z3gM5BvgcpdI/xgplEPr8wbGmsU2JGNtA5zlneDPGGGOMMQb44dcYY4wxxswNfvg1xhhjjDFzwxn7E02KasyGpjCmvoMaLdWN9ekqVe/K1IuqOWH6PGrc1NbmoosuSs+pmihaYSkHDhxo9mlhpJqyr3zlK00ZNawXXnhht810hKr1yrSbEe21zMors5TSaMWyOMlsgVhf1W4+/vjjTdkll1zS7GvMUf+dpd2kxkm1dH2phjWuqdXU+OvTNmv9qLnL7NQYb1o/Hod6RtWuz9KnmfpwrWeW9pfWdtS/ab/R3oq/3b17d7ed6Z1PnTrV7LN+uk8dHXWgei20YlO9MK2FOHeqZSPjiGNLY4fzoWpCadFIPakeR68rS+F8pnBOUesk9pmWUU9NCzrVP/I4999/f7Ov10f9rY49jlFaSel18JsNtqFqPnm/0/mQtmw8ro7pvrGjcUw9sKasZZwwnfZ6ejOPe/7I9LbZnB3Rjq++RBo6TtneehyW8fsE7fMnn3yyKWOfaz/y+Uf7kf3E7xP0OYU6eN4DL7300m77xhtvbMpuuOGGbptjiffO1Vht+s2vMcYYY4yZG/zwa4wxxhhj5gY//BpjjDHGmLlhpppf6vOyNLFZWlDqblSnSg0M9Zqqy3nlK1/ZlKmfIvVR1GipxoRaH2oetZz6vO9///vd9je/+c2mjDpLbYcHHnigKfvqV7/a7L/3ve8dWdeIVs9Dzz5qabTumdZ1miwuLjb+qHquzOOWcUHNlepx6aHM/lVtNlNJq46J8ZXp0Rmb1E5lmkq9NmooM70T+4m+s6o9oz5Uxyf1dzyO1mnWWr1xMZrBfqKWUzWPhw8fbsqoq1MdI9tQ68M5Rb24I9pvDvhtAPV62XXqvKF16/ttlmI+Ik9xrfMIde/U/Wm5lvWd/0wopYzVXDKWtR/ok825XeOecwHHsMYYx6xqfunry3lC65B5CXNfU0lH5HMK93Xepecq4/j888/vtulPrTz00EPNPr3rx9V1Fgz91kXLMu/ZiFY3S89d3od1n2XZs1GWIpja7CydueYxiIg4evRot00fb2p+tR360sjrtw0nTpxoyibJMTDOlznDb36NMcYYY8zc4IdfY4wxxhgzN8zc6mzc8gX/PVt24DKAvi6nVRfTz+qSP5eldFmCFi1cztQlA772p7RBX+1/8YtfbMrUskxth3gO1pev9nnOI0eOdNu0YtNlPi7FP/LII82+9sNll10Ws4C2RLp0ki3z0D6Gy4W6lMelWcpG9u3b122/+c1thszsOFwmzaQ9lFroEjCvU/uhz54uWz5mHGv/8zi6ZJqNz4g2/jI7tWlTa23qlklAtM68HvaFpizntVK+oO3EuUCXs5kGne2k9nuUPfBvVQbBOU6XzWknxf7X43I+/OEPf9jss42ULBUpxwj3Z8Hp06eb+4Zey65du5rfXnvttd02x6FaZUa08yXvS7fcckuzr1Ia2gqqNSVlGBzP2n6MIca/9invJzre+6yi9JysD/tbr4UWfRqrrM9jjz3W7Ku8KJPcTJtaazPms7lX20WvO6JNQx0Rcffdd3fbfL7gGNZYyqSILCMa54w5zik6JzIGdYzwmSHrG95T+Cyn9+x77rmnKVPJFiU707jH+M2vMcYYY4yZG/zwa4wxxhhj5gY//BpjjDHGmLlh5prfcTYUmT1FX9pA1RVRY6KpKiNaXRHT/qp2hZYxtH5RrZdqeSJWpkNVzS9tkhRqp6hhVT2pWplFRLzjHe8YWwe2l+puHn300aaM2le1sdEUwGtpPUNLPNXuUlenZbxOasrUamj79u1NGbXOqpW86667xh6HNk7UzqmuinqnTLtLLZeOjz79rbYdf0tNsrYRtVxanz6dpl43daVrjc4P2k4cT5ldDu171O6KNmiZjlZtniJaLR+1ktTVaRszvfEb3vCGZl+vk+lvVR9Hvb+mu41o58e3ve1tTRnHhM4NTNWs/c824PcIOmY1xtZyTllcXGzmMk1bzH5QrSbHKK9bY09jJmJl/Ok9hBrPhx9+uNvmvM97mMK605ZRbdGylLBM98557Jprrum2s3kiorXxyu53vKcybvS+vpbWmqMYZ52l39JEtGOPtm7UyOv3AIwV/lbjg3OT3gMZK3xW0r7iNzCMQdXY8t6p9eU5+FuFY4Bps/VveW/Seyfvs4zl1dhr+s2vMcYYY4yZG/zwa4wxxhhj5gY//BpjjDHGmLlhXX1+dTvziqMWjNog9bWkzyY1bqqRytI9UktDrconPvGJbvv2229vyqiBUT0KvfaocxlXn4hW10sPSWq/VNPK1Kiq82VK5aeffrrZVz/CzOtxmpw+fbrRI6luiedV/RG1aNSpqnaK/UA/StU7XnnllU2ZtpH6Rkes9AHV+qrOMGKlTkk1cLwWhXonarmycUV9nu5nx6HOi7pe9aU999xzx9Z92tCTU3XfHLM61tgu1Otp2vEslXNEq5XLdH8veclLmrIs9Sf7iej3ClkKd84v9BdVfSvHC9O/azt873vfa8p0vmTdqV/W61zLeUT53e9+11y7xjr7TOcCjjXqJLUf3ve+9zVl1DqrPjRLEUv9LfWh2tb8biXzpOY5dQzff//9TRk1v29605u6bc4T7G9tP86HqldlW3J+PH78eLc9qziJWNL46vUfO3as2z5w4EDz24svvrjbZtvzWUTh/MlY0XmDx8m8m5l+W+c5PtPwHqPjgz7j+u0A68r58eUvf3m3vX///qaMcaVxR12v1ofPQtPwffabX2OMMcYYMzf44dcYY4wxxswN62p1ptt8ja2v1o8ePdqU7dmzp9nXV/R8Bc8lGv1b2pnpsgVTmNJGS5eQuESgMoxR51F0yY3LCUTTHx8+fDg9p9oxcRlNl2lJthyj231pFc+E06dPj7U349KsXguXVyl50aUkyhxe8YpXNPsqFWF76fIRrYUoZcjS/jLmtTyzbuFyFftCl4i4RM/lQ10241jRWKCUgctrKiNZS8uqUYxLcc1lPr1WlnFfY4njl22hdk5cosyWL7nMp1Zcus36RETs3bu326YVls5VnLd4LbpkzXTGnANVbnbppZc2ZbpEyZjjsri2NZfi14rnnnuumWs1Fmhlp7HNMcs+0+VgziFM16sWYGwTlZjwOJx/dG7nPHHnnXc2+zrPMaZ03qD0g8vpX/jCF0b+3ajfaixQoqj3X7YBZQ8qrcks06ZNrbUZNypzowTlpptu6rZ1uT8i4t577232VcbBuKLVmd43OC9re1NGQEs4Pc8k8zKfA3RMsw1e+9rXNvvaDvwtpWjax7wn67Xxurg/7n6ZWeT5za8xxhhjjJkb/PBrjDHGGGPmBj/8GmOMMcaYuWGmmt9SSqNz1G3qXb/85S9326qVilipsVVdCXWU1ACr7om6RdXdUINDCzDV4ahdUMRKvYzqUTJtFVPuUl+mGqI+mxgtz9Lq0gqJGiI9rrbdNKxGxvGb3/ym6XNte/aDtid1VLw21XF997vfbco0dXNEa2FGzZX2C9Mt79y5s9lXHRO1utRGKln7ZhZZ3Gd/8m+zlN6qz2JdeU62/Xqh9aCGTPufll+ZtRzHIecftUzkuNR5hPpbznlad/bFiRMnmn3tV2p+NbU5z8HfavpRapIZ26rP5TymOl6Ou127djX7qpnWcU77tGmj+j/tC/Z9lqqZdnVazm8MOO+qPpixoPcQ9j11k5dddlm3TSsxxt+rXvWqblttufhb6op5b9Q+pXaUml+9T7Hur3/967ttxpBacEas73cEer59+/Z123ye2L17d7fNOZBaco0rxhzHmurtaWWoY41xRI2rztOse3aPoTZXz8kxwXunPidwLtDvliLauZXjRff7rM50X39rza8xxhhjjDEx4OG3lLKzlHKglHK0lPJoKeVvlv/9vFLK10opx5f/f3bO9uasw3FihuJYMUNxrJghOE7MpAyRPfwuIv621nqolPLHEfFQKeVrEfH+iPh6rfWTpZSPRcTHIuKjfQfT19C6XHLw4MHmd3fccUe3zdfqtODRV/J8zU07FX31z9fsusxC2xIuO+pyQ590QOvH5STN2nbVVVc1ZVy2vfvuu7ttSkG4bKXWZzynLmGz7vzt9ddf323r8u6IDFRTi5Nf//rXcd9993X7lB0ouozPpZo3vvGNzb7GBi2WaBWnS1ZcItffcqmLddD2zLLTRYzPfkj6bOZ0CajPIoaxqmjccmkzk09kx1xmarFSa23qorGSZSLKxmhEO0a4xEa7PV2mZjtprDDGuJypS5+MT55T5T/MQKjyBUqwtm7dOrbuXDLnuNM68Ld6HM4hRNtTbb04py0zlVhh1i4de5S16NxOGRNtnbSNeF/iHKk2X8y6yfZUOEfr+M+styLaewjrp/c/xibjWPe51M4lfI1Hxp+OM85jbK8s++kIpvqcom2j9wLOBbqM33c9lEtl6L2WzyIqD1Hbu1F10JinRSPvMRrrjIcjR45023wW0myYEe3cecUVVzRlvG+ohV2W1ZLtnkk5h9qw9r75rbU+VWs9tLz9q4g4FhE7IuLmiLht+We3RcQto49g5gHHiRmKY8UMxbFihuA4MZMykea3lHJBRFwVEQcjYmut9flXF09HxNYxf/OhUsqDpZQHKXA3m5MzjZNZf9xg1o8zjRW+STCbl0ljxXEyn5zpnMJVILM5GfzwW0r5o4j4z4j4SK21+Sy4Lj2tjHxiqbV+uta6v9a6n6/SzeZjGnGSfaFpNg/TiJW1dB0xZw+riRXHyfwxjTkly8hqNg+DrM5KKVtiKaBur7U+n+fwmVLKtlrrU6WUbRHRm3+wlDI2nSo1UNddd123TcsQ6uH0OJzkVDsT0WrTqGlTzR11YNQ16ZsEalWol1Lt4bve9a6m7IMf/GC3ndmURLT6mU996lNNGVNAK7RiU20zNVnUjF1zzTXddqa9jZhenDC9cabh0bfEel0RETfeeGOzrxYttJbh32qfMS2othn1jdQiqTUSdaZsT9UhZv8BwPagNk61rSxjbOp4YYyr1pnnZNzoeBjyHy/TihWeT+OBfazXxz7N0ovyWtlvWbpwtUKiTRY131l6c/5WdZdPPPFEU6axzPmPmnTV8bL/+QZMr5txpS82GGM8jvaR6gzHaf6mESsLCwtNu+g4Zdtq3J86daopU2u4iPY+wetk3GRWkRp/tHPkNweq6b7wwgubste97nXNvurKqSvWuYtWhtT1arla6Y3625e97GXd9smTJ5uyY8eOjT1H9m3KEKY5pygar4yVbK5jWfZNB3+r18520LHXZ3uZtWH2/QdjRZ8vDh8+3JRl/cZ5lTZpWQpjHaN96Yy1fFyqYzLE7aFExGci4lit9V+k6K6IuHV5+9aI+NKgM5pNiePEDMWxYobiWDFDcJyYSRny5vfaiHhvRDxSSnl4+d/+LiI+GRF3llI+EBEnI+Iv1qaKZoPgODFDcayYoThWzBAcJ2Yieh9+a63fiohx7/bfPN3qmI2K48QMxbFihuJYMUNwnJhJmXl6Y9WDqXb36quvbn577bXXdtuHDh1qyh555JFmX7VoFKtTd6WaHWrcHnrooW77sccea8qo51KtDfVbPK5q/dTXN6LVPTE9JvU66nf8nve8pyn7/Oc/3+yr7pOaX63vDTfc0JSpxpeoPnCol95qKKU0Gp5xKbEjWn2jpg99/jiK9iG1W4wT1ZlTD6wxTM0V9aB6XJ6DOnfVR02iaeK+Xhu1W7xuHS/UJGscU9fKcaZtMstUxwUp05VM088xQZ2qzk3UrfG3er1sQx3f1CDzt7rPa6JHp8YDx6L+lppf+gXrfubdPOo8isYgrzPTvurYGuAPfUaMS3vK61T9Mud99TuNaFMNU8PKts60+KqbpE6WKWE1DTQ/Itf6REQ8/vjj3fbXv/71pkz1wtQyU2esffad73ynKaNf9cc//vGRf8f6ZKmiI9o5JtPPrgVDj5/9jvPyJN9FDE3R26f5zXSz7Bv1gWb/aywzzonOOexTzp3r+XG70xsbY4wxxpi5wQ+/xhhjjDFmbpip7CGifQ2vr8CZplFf39Oeh7ICXaLcsWNHU8bX7LqEScs03edSHZcBmHpY4bKvWpRx+VJta7j0xGUTtdVhKmS1kIloLXq4DKlLY5dffnlTxmUTTUyibbeWsoeFhYVmGVCXx5jqUW11uATIpCpqJcW25TK4nofyE712ti1tinRJUFO5Rqxse112YgzpEr7GTMTKpVn9Wy6vUsKh9lJcQsusb1gHtt96odfDGNV2Yv9nS+7sY+7rsdje+lvGBmUZWt9syTSindc4x6lkh3/HfsskG0THf5YemnXPJBtan7VORDFO6sAxofMw07MeOHCg2c/m2SzVNe9p2vecJ9Quj/Xj/Y5tqOOB900d05T2UIKnccK5if2r56S04eabb+62uezOc+rSP9uS17LRyeQTk8geOC61L3icbM5mH2fpg9k3KntgGcnmnLWWtvjNrzHGGGOMmRv88GuMMcYYY+YGP/waY4wxxpi5YeZWZ6rxUA0U0wn/6Ec/6rb7UgGq3oy2NbTlUF0RLVr0uEzZ9+Mf/7jZV90LNWOsr+qeWB+9buoqqTvONGO0uGFaTkX11dSzUvs1NOXuNDnvvPPi3e9+d7e/ffv2bpttrfrCPi2SthmPQ42Ttp/qiiNaXSf1tpm1GC2LqLnS2KAeVPd5zkyDyv6kHpM6aUWtmagtoz5P25qxuZZwThn3TQFh+3LeyNJuZuOA1j579uzptjmH8JuDLBVpZn1H7aReS5/VnV4n5zz2uVpPZfZ6/HYhi9dMoz1NFhcXm3jWNuI8q9epfxOx0pLzW9/6VrdNGzRqd3Wu5/yjfU8bQY5RnQ/Zn2zrvXv3dtsf/vCHmzJNU8zxzBjXuYnfKrzmNa9p9rX+vN+pfpn9ze9odPwyNtda8ztrC67VWrlRM8t20uMy5qjVzvT/2bch27Zta/b1mwNeR59GeShDNdJZP/rNrzHGGGOMmRv88GuMMcYYY+YGP/waY4wxxpi5Yaaa34WFhUbbpLoranhUK0R9B7VxqutQbUrESj2keqmqrjhipe5JoZZKdVfUlWR6Qmq0dJ++tDyuXhu1aNSlqtcedUC7du3qtulLyrZWbV/m5TlNXvjCF8arX/3qbl+1YZmPJTVNvDZta2rR2Geqz2Sa0he/+MVj60OdqbY9z6m+wzwWx4PWj57T1PWqRpBtwvGgunfqVVWPRR0vx4rWibE5S7TOmR6O7ZulGs7GIX975ZVXNmX79+/vtu+5556mLNM4ZvrfiLZf2d6ZPyrHrZ6n77f67QLL2CYKx8g47f24NNXTYHFxsTlvlt7429/+drdNXTavRecUHofzro4R9u+4++IoslTn7EPVX/Obg89+9rPdtqYdHnVc9RNmGzCt/CWXXNJtc5zpvt6LI1bOs6rFZoyzXzYbmVZV72t99zztR31miVipLc90tKrj1TktYqW2XevOex7jKkvjnGl3s/2hemm/+TXGGGOMMXODH36NMcYYY8zcsK7pjfVVNZcdMwsrvurXJRAu33CJWNMAMyWwLgtxaYeyB32d32eLonZDmZ3Pk08+2ewzHaqm2mQbcElDlyK4/KbLl1wmy5YMdMlqLa1gFhYWmiUZXcphfXWJMLMHi2iXKLn8wvbUNsukIbocNOq4mr6V8gQuCep5MmsrSmd4nGzZm8vT+lvWT+vDNqA9lMopaFs4SzQeeO26tMz+5lKztj+lIvyttg3HT2bJxKVvXdrts0/UJXyObz1ONl4i2uvsk8ionIb9r7HDOZexrHIfPcdapjdeWFho6qznYsrnb3zjG9027ydqHRbR2sz1jTUdF7Si1PlOJWujyOZo9pleG2NR44RpiBmbei3ZuIpo45GxqTIrxkkmRVqtJdZmgP2tY5jSBaJ9zGcEkt1jVCqpVqmsT0Q7tvrsC/XasmdAniObxyx7MMYYY4wxBvjh1xhjjDHGzA1++DXGGGOMMXPDTIU0tdZGS5JpE1UXRt0IbU+ou1SoOdI0wDt37hx7TmpeqB/VulN/Qs2JprGlrkW1w5oKNWKlBm7r1q3dNjWYtKK67rrrxv5WdUJsW+rz9NpmlfJxy5Ytje2WnjfT9falvNRYoGaRMaX7WYps2pUxtWuW6pNkln06PjRFaMRKiyD9W+rxMu0cy7L0wGyvLKXuWjPOtipL0Zm1b0QbK30pgvVvT5482ZRprFDDT2s51dSy7uxH1eeyTOeJLDYi8vbKtJxsL41z6hBp4ajfT+g51jK9MdNga59yntX5mm3AuV2PyfHNNtLr41ylWl3OcZx3M8tG6mj1OxLOVW95y1tGnj9iZZ+pVpcxRC2pthHbVq8707JyP7PSO1tYK816lvqYbch9nWM4Lvvu/YrGed85s+eE7Jwsm8T6cDXPJn7za4wxxhhj5gY//BpjjDHGmLlhXWUPutTCV+5qrcHX6sxmpjYtWbYjwtfs+luW9e0rWfYRLt/oMimPSTmHWrExqwqXLLn8Po4+W5BZSR2UWmuzhKQxwyVnXRpR26GIlcs8mT1UJl2hBZjWjUuUXFrU5VWek/XTPqRURdHlcZ6DdWB7ZbaBlM7omOzL1KPjjraAawmXszN7Nu1jLmfzevSYLMvmDS4X6z77/9xzz232KcVReC1af12mj2j79Nlnn23KMtkLYyWDx5nEsmycVdNazjXPPfdc0xdaR/aDjgO2O/tXl5UvvvjipozjW9uX8afzCMcz5yY9TpbxMiJi27Zt3TYtCPXaKI+hLENjl+ObbaT9mEnRaK3HOuick0mwpk0pZeb3vT4pgaJtyvblHKK2ebymbB7Lrr+vbYZmbYvI7cwmYai9WXPuVZ/NGGOMMcaYDYYffo0xxhhjzNzgh19jjDHGGDM3zFzzq3oh1TlRC6K6Rmo5M70U7YSyNKaTWJNk6WapVaEeTsv523379nXbWbrliFbr3JfWcKhtELUyWVpnLVuNxmYotdZGy6TtyVjIUsJm6RIzW5c+tO8Zt9TDqVaNmk+i9c3sjRhDbBM9J3WcPG5m/zWJZY2ec5a2RIuLi81cMc4iLyLGxlTEyjZU7Vxfu2QaTB2nnLe4n9nicbxr3FPzm+ks+U2EnofadqLXzThXnSrbh22r5VlK72lSSmn6UcdipkPs0zdq39OqkjGm96kszTi/G2Dfa59luk3Wgdpc7RfOKbxu1UEzHbTa+UW0FqLZHMz5kDGl8dh3v5s242JgLe97SjaG1cqQ9zzGlTkx4rUAAAe7SURBVPbxJLriaZGNrYjcSlX3s+cv7mf356YuY0uMMcYYY4zZZPQ+/JZS/qCU8t1SyuFSyqOllH9Y/vcLSykHSyknSimfL6Wc/S7UZk1xrJghOE7MUBwrZgiOEzMpQ978/m9E3FBr/bOIuDIi3lpKeU1E/HNE/Gut9eUR8YuI+MDaVdNsEBwrZgiOEzMUx4oZguPETESv5rcuCUOeF3RtWf5fjYgbIuKvl//9toj4+4j490lOrnoPapfUT/GZZ55pyqhjVP9CapfoCazaIWqMMp/LLPUrz0lPQv1banK0Pnv37m3KqB/MvHupEcp0Sln6SWoN6WObMa1YOeeccxrtZqbr1fbMUmlGtNfWp+PUPmV/qnaOfc86UGOZoXVgLOpx++JN26gv9fbQmGf78DqHehQv12Fqc8qWLVsaDZzqX5myVX1EOfbVDzMiYseOHd02vXKzNNUs03ZRP/KIlXOT9iPrx/bWPmb/a4rbvjjX+mZ65YhWg8nr1Dijby7HoV5blmY4YnqxsrCw0GhMVW+daR+pg2ZM6fhhumr2od7jOEZ0n+fM5oK+lO4K53L9W84TnLc0xugly+vU/Wy+oe8wv3nRtu7z+Z32c4pqTGel81U0PrO044yNLGX0JGmIz4RMu59pyzNd7yTa4aH9NUjzW0pZLKU8HBHPRsTXIuK/I+KXtdbnW/6JiNgx5m8/VEp5sJTy4C9+8YtBlTIbl9XGisYJjeTN5mNacwofRszmYxpziuNk8zOtOWWWSXrM+jHo4bfW+lyt9cqIeGlEXB0Rlw49Qa3107XW/bXW/XwjYDYfq40VjRNmMDObj2nNKXRMMJuPacwpjpPNz7TmlFk7S5j1YSKrs1rrL0spByLitRHxJ6WUc5b/q+qlEfHkgL9vlmx0GYipDX/605922z/72c+aMr4C1yVA2v7QNkaXBLMl/T6LqMw2i0taOpg4sPS4rE+2FM/jZJZlWd15nazDuOX2ASkOVx0rL3jBC+KCCy4Yed6sX7Il5+ePK/VL65/JHrT92NeZXVTfErQeN7MIGtD2Y8sYq1kcZ/XJbAInSVN5pnPKOeec08gJNCU408TqsjfbiHKa3bt3d9unTp1qynhcfbDicVSScdFFFzVlGuMR7VIzl4R13opo446/HVe3iJXXrfGaxTn/lhIsjQ++ZeUcrMvtOibWck7h8fW62X56nRzfTAGu1pocE5QH6D5lfnr/67Mvy6QOHKc6JzKGtF+yFMqE/cR57ejRo90220/P+cADDzRlx48fb/ZXa0s6jTgZt+Te1zerhW2q/dhnRzru70YdNytbKxlEdo7smSKziJ3kusYxxO3h/FLKnyxv/2FE3BQRxyLiQES8e/lnt0bElwad0WxaHCtmCI4TMxTHihmC48RMypA3v9si4rZSymIsPSzfWWv9SinlaETcUUr5x4j4XkR8Zg3raTYGjhUzBMeJGYpjxQzBcWImYojbw5GIuGrEvz8eS7oaYyLCsWKG4TgxQ3GsmCE4TsyklFnaeJRSfhoRJyPiTyPiZz0/n2c2QvvsrrWe3/+zyXGcDGajtI9jZf3ZCO3jOFl/Nkr7OFbWn43QPmPjZKYPv91JS3mw1rp/5ifeILh9lnA75Lh9fo/bIsfts4TbIcft83vcFjkbvX0GWZ0ZY4wxxhizGfDDrzHGGGOMmRvW6+H30+t03o2C22cJt0OO2+f3uC1y3D5LuB1y3D6/x22Rs6HbZ100v8YYY4wxxqwHlj0YY4wxxpi5wQ+/xhhjjDFmbpjpw28p5a2llB+WUk6UUj42y3OfjZRSdpZSDpRSjpZSHi2l/M3yv59XSvlaKeX48v+fu951nTWOlRbHymgcJy2Ok/E4VlocK6NxnLRs1jiZmeZ3Oe3gY7GUc/uJiHggIv6q1np0JhU4CymlbIuIbbXWQ6WUP46IhyLiloh4f0T8vNb6yeXBd26t9aPrWNWZ4lhZiWNlJY6TlThORuNYWYljZSWOk5Vs1jiZ5ZvfqyPiRK318Vrr/0XEHRFx8wzPf9ZRa32q1npoeftXEXEsInbEUrvctvyz22Ip0OYJxwpwrIzEcQIcJ2NxrADHykgcJ2CzxsksH353RMSPZf+J5X8zEVFKuSCWcpMfjIittdanlouejoit61St9cKxkuBY6XCcJDhOGhwrCY6VDsdJwmaKE3/wdhZQSvmjiPjPiPhIrfV/tKwu6VLsR2ciwrFihuE4MUNxrJghbLY4meXD75MRsVP2X7r8b3NNKWVLLAXU7bXWLyz/8zPLOpvn9TbPrlf91gnHyggcKytwnIzAcTISx8oIHCsrcJyMYDPGySwffh+IiItLKReWUl4QEX8ZEXfN8PxnHaWUEhGfiYhjtdZ/kaK7IuLW5e1bI+JLs67bOuNYAY6VkThOgONkLI4V4FgZieMEbNY4mWmGt1LKn0fEv0XEYkR8ttb6TzM7+VlIKeW6iLgvIh6JiNPL//x3saSnuTMidkXEyYj4i1rrz9elkuuEY6XFsTIax0mL42Q8jpUWx8poHCctmzVOnN7YGGOMMcbMDf7gzRhjjDHGzA1++DXGGGOMMXODH36NMcYYY8zc4IdfY4wxxhgzN/jh1xhjjDHGzA1++DXGGGOMMXODH36NMcYYY8zc8P/FPwqrOmeftgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 864x432 with 10 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "label_dict = {0:'airplane', 1:'automobile', 2:'bird', 3:'cat', 4:'deer', 5:'dog', 6:'frog', 7:'horse', 8:'ship', 9:'truck'}\n",
    "#定义显示图像数据以及对应标签的函数\n",
    "def plot_images_labels_prediction(images,labels,prediction,idx,num=10):\n",
    "    fig = plt.gcf()\n",
    "    fig.set_size_inches(12,6)\n",
    "    if num > 10:\n",
    "        num=10\n",
    "    for i in range(0,num):\n",
    "        ax=plt.subplot(2,5,1+i)\n",
    "        ax.imshow(images[idx],cmap='binary')\n",
    "        \n",
    "        title = str(i)+','+label_dict[labels[idx]]\n",
    "        if len(prediction)>0:\n",
    "            title+='=>'+label_dict[prediction[idx]]\n",
    "        ax.set_title(title,fontsize=10)\n",
    "        idx+=1\n",
    "    plt.show()\n",
    "    \n",
    "plot_images_labels_prediction(Xtest,Ytest,[],1,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.333333333333336\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.24052288"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xtrain[0][0][0]\n",
    "print(Xtrain[0][0][0])\n",
    "Xtrain_normalize = Xtrain.astype('float32')/255.0\n",
    "Xtest_normalize = Xtest.astype('float32')/255.0\n",
    "Xtrain_normalize[0][0][0]\n",
    "# print(Xtrain_normalize[0][0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "encoder = OneHotEncoder(sparse=False)\n",
    "yy = [[0],[1],[2],[3],[4],[5],[6],[7],[8],[9]]\n",
    "encoder.fit(yy)\n",
    "Ytrain_reshape = Ytrain.reshape(-1,1)\n",
    "Ytrain_onehot = encoder.transform(Ytrain_reshape)\n",
    "Ytest_reshape = Ytest.reshape(-1,1)\n",
    "Ytest_onehot = encoder.transform(Ytest_reshape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# def get_train_batch(number,batch_size):\n",
    "#     return np.array(Xtrain_normalize[number*batch_size:(number+1)*batch_size]).reshape([-1,1024]),\\\n",
    "# np.array(Ytrain_onehot[number*batch_size:(number+1)*batch_size])\n",
    "# x_1,y_1 = get_train_batch(1,10)\n",
    "# print(x_1,y_1)\n",
    "# print(x_1.shape,y_1.shape)\n",
    "\n",
    "\n",
    "# x_2  = x_1[0]\n",
    "# x_2.reshape([-1, 32, 32])\n",
    "# # print('这是x_2',x_2)\n",
    "# x_3 = tf.reshape(x_1, [-1, 32, 32])\n",
    "# # # x_4 = np.reshape()\n",
    "# with tf.Session() as tess:\n",
    "#     print(sess.run(x_3))\n",
    "#     print(x_3.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From <ipython-input-7-c0ceade493fb>:33: LSTMCell.__init__ (from tensorflow.python.ops.rnn_cell_impl) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "This class is equivalent as tf.keras.layers.LSTMCell, and will be replaced by that in Tensorflow 2.0.\n",
      "WARNING:tensorflow:From <ipython-input-7-c0ceade493fb>:34: MultiRNNCell.__init__ (from tensorflow.python.ops.rnn_cell_impl) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "This class is equivalent as tf.keras.layers.StackedRNNCells, and will be replaced by that in Tensorflow 2.0.\n",
      "WARNING:tensorflow:From <ipython-input-7-c0ceade493fb>:44: dynamic_rnn (from tensorflow.python.ops.rnn) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use `keras.layers.RNN(cell)`, which is equivalent to this API\n",
      "WARNING:tensorflow:Entity <bound method MultiRNNCell.call of <tensorflow.python.ops.rnn_cell_impl.MultiRNNCell object at 0x7fd05f599e10>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method MultiRNNCell.call of <tensorflow.python.ops.rnn_cell_impl.MultiRNNCell object at 0x7fd05f599e10>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method MultiRNNCell.call of <tensorflow.python.ops.rnn_cell_impl.MultiRNNCell object at 0x7fd05f599e10>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method MultiRNNCell.call of <tensorflow.python.ops.rnn_cell_impl.MultiRNNCell object at 0x7fd05f599e10>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:From /usr/local/lib/python3.6/site-packages/tensorflow/python/ops/init_ops.py:1251: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Call initializer instance with the dtype argument instead of passing it to the constructor\n",
      "WARNING:tensorflow:From /usr/local/lib/python3.6/site-packages/tensorflow/python/ops/rnn_cell_impl.py:961: calling Zeros.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Call initializer instance with the dtype argument instead of passing it to the constructor\n",
      "WARNING:tensorflow:Entity <bound method LSTMCell.call of <tensorflow.python.ops.rnn_cell_impl.LSTMCell object at 0x7fd05f599e48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method LSTMCell.call of <tensorflow.python.ops.rnn_cell_impl.LSTMCell object at 0x7fd05f599e48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method LSTMCell.call of <tensorflow.python.ops.rnn_cell_impl.LSTMCell object at 0x7fd05f599e48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method LSTMCell.call of <tensorflow.python.ops.rnn_cell_impl.LSTMCell object at 0x7fd05f599e48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method LSTMCell.call of <tensorflow.python.ops.rnn_cell_impl.LSTMCell object at 0x7fd05f599b38>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method LSTMCell.call of <tensorflow.python.ops.rnn_cell_impl.LSTMCell object at 0x7fd05f599b38>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method LSTMCell.call of <tensorflow.python.ops.rnn_cell_impl.LSTMCell object at 0x7fd05f599b38>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method LSTMCell.call of <tensorflow.python.ops.rnn_cell_impl.LSTMCell object at 0x7fd05f599b38>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "step 100, training accuracy 0\n",
      "step 200, training accuracy 0\n",
      "step 300, training accuracy 0.125\n",
      "step 400, training accuracy 0.125\n",
      "step 500, training accuracy 0.25\n",
      "step 600, training accuracy 0.25\n",
      "step 700, training accuracy 0.375\n",
      "step 800, training accuracy 0\n",
      "step 900, training accuracy 0.625\n",
      "step 1000, training accuracy 0.25\n",
      "step 1100, training accuracy 0.375\n",
      "step 1200, training accuracy 0.375\n",
      "step 1300, training accuracy 0.125\n",
      "step 1400, training accuracy 0\n",
      "step 1500, training accuracy 0.375\n",
      "step 1600, training accuracy 0.25\n",
      "step 1700, training accuracy 0\n",
      "step 1800, training accuracy 0.5\n",
      "step 1900, training accuracy 0.375\n",
      "step 2000, training accuracy 0\n",
      "step 2100, training accuracy 0.25\n",
      "step 2200, training accuracy 0.375\n",
      "step 2300, training accuracy 0.375\n",
      "step 2400, training accuracy 0.5\n",
      "step 2500, training accuracy 0.5\n",
      "step 2600, training accuracy 0.125\n",
      "step 2700, training accuracy 0.375\n",
      "step 2800, training accuracy 0.375\n",
      "step 2900, training accuracy 0.25\n",
      "step 3000, training accuracy 0.375\n",
      "step 3100, training accuracy 0.5\n",
      "step 3200, training accuracy 0.375\n",
      "step 3300, training accuracy 0.25\n",
      "step 3400, training accuracy 0.25\n",
      "step 3500, training accuracy 0.5\n",
      "step 3600, training accuracy 0\n",
      "step 3700, training accuracy 0.375\n",
      "step 3800, training accuracy 0.625\n",
      "step 3900, training accuracy 0.25\n",
      "step 4000, training accuracy 0.625\n",
      "step 4100, training accuracy 0.75\n",
      "step 4200, training accuracy 0.125\n",
      "step 4300, training accuracy 0.375\n",
      "step 4400, training accuracy 0.25\n",
      "step 4500, training accuracy 0.25\n",
      "step 4600, training accuracy 0.625\n",
      "step 4700, training accuracy 0.375\n",
      "step 4800, training accuracy 0.125\n",
      "step 4900, training accuracy 0.375\n",
      "step 5000, training accuracy 0.25\n",
      "train finished takes: 640.0465960502625\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "epoch_list=[]\n",
    "accuracy_list=[]\n",
    "loss_list = []\n",
    "\n",
    "lr = (1e-3)/3\n",
    "# 每个时刻的输入特征是28维的，就是每个时刻输入一行，一行有 28 个像素\n",
    "input_size = 32\n",
    "# 时序持续长度为28，即每做一次预测，需要先输入28行\n",
    "timestep_size = 32\n",
    "# 每个隐含层的节点数\n",
    "hidden_size = 256\n",
    "# LSTM layer 的层数\n",
    "layer_num = 2\n",
    "# 最后输出分类类别数量，如果是回归预测的话应该是 1\n",
    "class_num = 10\n",
    "\n",
    "# keep_prob = tf.placeholder(tf.float32, [])\n",
    "_batch_size = tf.placeholder(tf.int32, [])\n",
    "# x = tf.placeholder(tf.float32, [None, 784])\n",
    "x = tf.placeholder('float',shape=[None,32,32],name='x')\n",
    "y = tf.placeholder(tf.float32, [None, class_num],name='y')\n",
    " \n",
    "##########################################################################搭建LSTM模型\n",
    " \n",
    "# 把784个点的字符信息还原成 28 * 28 的图片\n",
    "# 下面几个步骤是实现 RNN / LSTM 的关键\n",
    "####################################################################\n",
    "# **步骤1：RNN 的输入shape = (batch_size, timestep_size, input_size)\n",
    "# x = tf.reshape(x, [-1, 32, 32])\n",
    " \n",
    "stacked_rnn = []\n",
    "for iiLyr in range(layer_num):\n",
    "    stacked_rnn.append(tf.nn.rnn_cell.LSTMCell(num_units=hidden_size, state_is_tuple=True))\n",
    "mlstm_cell = tf.nn.rnn_cell.MultiRNNCell(cells=stacked_rnn, state_is_tuple=True)\n",
    "\n",
    "init_state = mlstm_cell.zero_state(_batch_size, dtype=tf.float32)\n",
    "\n",
    "# **步骤6：方法一，调用 dynamic_rnn() 来让我们构建好的网络运行起来\n",
    "# ** 当 time_major==False 时， outputs.shape = [batch_size, timestep_size, hidden_size]\n",
    "# ** 所以，可以取 h_state = outputs[:, -1, :] 作为最后输出\n",
    "# ** state.shape = [layer_num, 2, batch_size, hidden_size],\n",
    "# ** 或者，可以取 h_state = state[-1][1] 作为最后输出\n",
    "# ** 最后输出维度是 [batch_size, hidden_size]\n",
    "outputs, state = tf.nn.dynamic_rnn(mlstm_cell, inputs=x, initial_state=init_state, time_major=False)\n",
    "# outputs, state = tf.nn.dynamic_rnn(mlstm_cell, inputs=x,dtype=tf.float32,time_major=False)\n",
    "\n",
    "h_state = outputs[:, -1, :] \n",
    "# h_state = outputs[:, -1, :]  # 或者 h_state = state[-1][1]\n",
    " \n",
    "# *************** 为了更好的理解 LSTM 工作原理，我们把上面 步骤6 中的函数自己来实现 ***************\n",
    "# 通过查看文档你会发现， RNNCell 都提供了一个 __call__()函数（见最后附），我们可以用它来展开实现LSTM按时间步迭代。\n",
    "# **步骤6：方法二，按时间步展开计算\n",
    "# outputs = list()\n",
    "# state = init_state\n",
    "# with tf.variable_scope('RNN'):\n",
    "#     for timestep in range(timestep_size):\n",
    "#         if timestep > 0:\n",
    "#             tf.get_variable_scope().reuse_variables()\n",
    "#         # 这里的state保存了每一层 LSTM 的状态\n",
    "#         (cell_output, state) = mlstm_cell(x[:, timestep, : ], state)\n",
    "# #         (cell_output, state) = mlstm_cell(x[:, timestep, : ])\n",
    "\n",
    "#         print(\"我看你作妖到何时\",cell_output,state)\n",
    "#         outputs.append(cell_output)\n",
    "# h_state = outputs[-1]\n",
    " \n",
    "# 上面 LSTM 部分的输出会是一个 [hidden_size] 的tensor，我们要分类的话，还需要接一个 softmax 层\n",
    "# 首先定义 softmax 的连接权重矩阵和偏置\n",
    "# out_W = tf.placeholder(tf.float32, [hidden_size, class_num], name='out_Weights')\n",
    "# out_bias = tf.placeholder(tf.float32, [class_num], name='out_bias')\n",
    "# 开始训练和测试\n",
    "W = tf.Variable(tf.truncated_normal([hidden_size, class_num], stddev=0.1), dtype=tf.float32)\n",
    "bias = tf.Variable(tf.constant(0.1,shape=[class_num]), dtype=tf.float32)\n",
    "y_pre = tf.nn.softmax(tf.matmul(h_state, W) + bias)\n",
    "\n",
    "# def get_train_batch(number,batch_size):\n",
    "#     return np.array(Xtrain_normalize[number*batch_size:(number+1)*batch_size]),\\\n",
    "# np.array(Ytrain_onehot[number*batch_size:(number+1)*batch_size])\n",
    "def get_train_batch(number,batch_size):\n",
    "    return np.array(Xtrain_normalize[number*batch_size:(number+1)*batch_size],dtype=float),\\\n",
    "np.array(Ytrain_onehot[number*batch_size:(number+1)*batch_size])\n",
    "\n",
    "# 损失和评估函数\n",
    "cross_entropy = -tf.reduce_mean(y * tf.log(y_pre))\n",
    "train_op = tf.train.AdamOptimizer(lr).minimize(cross_entropy)\n",
    "saver = tf.train.Saver()\n",
    "correct_prediction = tf.equal(tf.argmax(y_pre,1), tf.argmax(y,1))\n",
    "accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n",
    "sess = tf.Session()\n",
    "sess.run(tf.global_variables_initializer())\n",
    "\n",
    "startTime =time()\n",
    "for i in range(5001):\n",
    "    batch_size = 8\n",
    "    batch_x,batch_y = get_train_batch(i,batch_size)\n",
    "\n",
    "    if (i+1)%100 == 0:\n",
    "#         train_accuracy = sess.run(accuracy, feed_dict={\n",
    "#             x:batch_x, y: batch_y, keep_prob: 1.0, batch_size: batch_size})\n",
    "        loss,train_accuracy = sess.run([cross_entropy,accuracy], feed_dict={\n",
    "        x:batch_x, y: batch_y,_batch_size:batch_size})\n",
    "        epoch_list.append(i+1)\n",
    "        loss_list.append(loss)\n",
    "        accuracy_list.append(train_accuracy)\n",
    "        # 已经迭代完成的 epoch 数: mnist.train.epochs_completed\n",
    "        print(\"step %d, training accuracy %g\" % ((i+1), train_accuracy))\n",
    "\n",
    "    sess.run(train_op, feed_dict={x: batch_x, y: batch_y,_batch_size: batch_size})\n",
    "    saver.save(sess,'/root/.ipython/profile_nbserver/cash_file/CIFAR10_2rnn/cifar10_model.ckpt')\n",
    "duration = time()-startTime\n",
    "print('train finished takes:',duration)\n",
    " \n",
    "# test_total_batch = int(len(Xtest_normalize)/batch_size)\n",
    "# test_acc_sum = 0.0\n",
    "# for i in range(test_total_batch):\n",
    "#     test_image_batch = Xtest_normalize[i*batch_size:(i+1)*batch_size]\n",
    "#     test_label_batch = Ytest_onehot[i*batch_size:(i+1)*batch_size]\n",
    "#     test_batch_acc = sess.run(accuracy,feed_dict= {x:test_image_batch,y:test_label_batch})\n",
    "#     test_acc_sum += test_batch_acc\n",
    "# test_acc = float(test_acc_sum/test_total_batch)\n",
    "# print('test accuracy:{:.6f}'.format(test_acc))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#可视化损失\n",
    "fig = plt.gcf()\n",
    "fig.set_size_inches(4,2)\n",
    "plt.plot(epoch_list,loss_list,label='loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('step')\n",
    "plt.legend(['loss'],loc='upper right')\n",
    "\n",
    "\n",
    "#可视化准确率\n",
    "plt.plot(epoch_list,accuracy_list,label='accuracy')\n",
    "fig = plt.gcf()\n",
    "fig.set_size_inches(4,2)\n",
    "plt.ylim(0.1,1)\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('step')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 0.0, 0.125, 0.125, 0.25, 0.25, 0.375, 0.0, 0.625, 0.25, 0.375, 0.375, 0.125, 0.0, 0.375, 0.25, 0.0, 0.5, 0.375, 0.0, 0.25, 0.375, 0.375, 0.5, 0.5, 0.125, 0.375, 0.375, 0.25, 0.375, 0.5, 0.375, 0.25, 0.25, 0.5, 0.0, 0.375, 0.625, 0.25, 0.625, 0.75, 0.125, 0.375, 0.25, 0.25, 0.625, 0.375, 0.125, 0.375, 0.25] [0.22667153, 0.21353738, 0.23287728, 0.18592155, 0.20689583, 0.19561328, 0.19546476, 0.22274601, 0.1796268, 0.22860935, 0.18298653, 0.14137705, 0.25442213, 0.19773562, 0.20991306, 0.18173526, 0.24712917, 0.1645138, 0.2105927, 0.22727923, 0.2185018, 0.18709686, 0.1823415, 0.16212611, 0.1511089, 0.23155144, 0.13187265, 0.1804516, 0.21447214, 0.21187675, 0.15787998, 0.13776095, 0.16855991, 0.20045769, 0.17517431, 0.22867283, 0.20157512, 0.1438162, 0.18481444, 0.13604686, 0.15228757, 0.27662286, 0.145011, 0.17034885, 0.23726878, 0.15167658, 0.17631713, 0.2370636, 0.15312964, 0.18779042]\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_list,loss_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test accuracy:0.370900\n",
      "[4 8 8 0 6 6 6 4 2 1 4 9 6 7 9 8 5 3 8 7 1 0 4 9 2 6 6 7 9 6 6 2 4 6 9 8 2\n",
      " 1 6 5 0 4 5 4 8 8 6 6 4 4]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 10 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "batch_size = 50\n",
    "test_total_batch = int(len(Xtest_normalize)/batch_size)\n",
    "test_acc_sum = 0.0\n",
    "for i in range(test_total_batch):\n",
    "    test_image_batch = Xtest_normalize[i*batch_size:(i+1)*batch_size]\n",
    "    test_label_batch = Ytest_onehot[i*batch_size:(i+1)*batch_size]\n",
    "    test_batch_acc = sess.run(accuracy,feed_dict= {x:test_image_batch,y:test_label_batch,_batch_size: batch_size})\n",
    "    test_acc_sum += test_batch_acc\n",
    "test_acc = float(test_acc_sum/test_total_batch)\n",
    "print('test accuracy:{:.6f}'.format(test_acc))\n",
    "\n",
    "\n",
    "test_pred = sess.run(y_pre,feed_dict={x:Xtest_normalize[:50],_batch_size: batch_size})\n",
    "prediction_result =sess.run(tf.argmax(test_pred,1))\n",
    "print(prediction_result)\n",
    "\n",
    "\n",
    "plot_images_labels_prediction(Xtest,Ytest,prediction_result,0,50)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 8, 8, 0, 6, 6, 6, 4, 2, 1])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "def predict(sess,inputs):\n",
    "#     preds = sess.run('pred:0', feed_dict={'X:0': inputs}) \n",
    "    test_pred = sess.run(y_pre,feed_dict={x:inputs[:10],_batch_size: 10})\n",
    "    #部署clipper时用这种写法\n",
    "#     test_pred = sess.run('pred:0',feed_dict={'x:0':inputs[:50]})\n",
    "\n",
    "    prediction_result =sess.run(tf.argmax(test_pred,1))\n",
    "    # `X` is used, it must be defined in the model with that name explicitly!\n",
    "    return prediction_result\n",
    "predict(sess,Xtest_normalize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "数据类型为啥不对啊  源代码 运行的是  [[1.1,2.0]]转换成array([[1.1,2.0]], dtype=float32)类的数据类型 但我无论怎么转换都只能得到 [[1.1,2.0]]形式的数据类型  为什么 啊啊啊啊啊？？\n",
    "[[1.1,2.0]]转换成array([[1.1,2.0]], dtype=float32)\n",
    "\n",
    "卡了我两天 定义的 常规变量 不要和tensor变量重名 batch_size 和整形 batch_size 重名了  运行初始化 定义时 运行的是 plachholer   \n",
    "\n",
    "\n",
    "有这个问题 不知道怎么解决\n",
    "https://blog.csdn.net/junjie20082008/article/details/85762266\n",
    "\n",
    "批次最多设计为10 训练5000次会梯度爆炸"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
